Index: org.springframework.test/src/test/java/org/springframework/test/context/support/CustomizedGenericXmlContextLoaderTests.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/support/CustomizedGenericXmlContextLoaderTests.java	(revision 1417)
+++ org.springframework.test/src/test/java/org/springframework/test/context/support/CustomizedGenericXmlContextLoaderTests.java	(working copy)
@@ -22,6 +22,7 @@
 import org.junit.Test;
 
 import org.springframework.context.support.GenericApplicationContext;
+import org.springframework.test.context.ContextCacheKey;
 
 /**
  * Unit test which verifies that extensions of
@@ -46,7 +47,7 @@
 		new GenericXmlContextLoader() {
 
 			@Override
-			protected void customizeContext(GenericApplicationContext context) {
+			protected void customizeContext(GenericApplicationContext context, ContextCacheKey contextCacheKey) {
 				assertFalse("The context should not yet have been refreshed.", context.isActive());
 				builder.append(expectedContents);
 			}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/SubBean.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/SubBean.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/SubBean.java	(revision 0)
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context.junit4.concurrency.model;
+
+import org.springframework.stereotype.Component;
+
+/**
+ * @author <a href="mailto:kristian@zenior*dot*no">Kristian Rosenvold</a>
+ */
+@Component
+public class SubBean extends BaseBean<RequestStorage> {
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/BaseBean.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/BaseBean.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/BaseBean.java	(revision 0)
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context.junit4.concurrency.model;
+
+import org.springframework.stereotype.Component;
+import org.springframework.beans.factory.annotation.Autowired;
+
+/**
+ * @author <a href="mailto:kristian@zenior*dot*no">Kristian Rosenvold</a>
+ */
+@Component
+public abstract class BaseBean<T>  {
+    private T service;
+
+    public T getService() {
+        return service;
+    }
+
+    @Autowired
+    public void setService(T service) {
+        this.service = service;
+    }
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Storage1Impl.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Storage1Impl.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Storage1Impl.java	(revision 0)
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context.junit4.concurrency.model;
+
+/**
+ * @author <a href="mailto:kristian@zenior*dot*no">Kristian Rosenvold</a>
+ */
+public class Storage1Impl implements SessionStorage {
+    public String id() {
+        return this.toString();
+    }
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/SessionStorage.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/SessionStorage.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/SessionStorage.java	(revision 0)
@@ -0,0 +1,7 @@
+package org.springframework.test.context.junit4.concurrency.model;
+
+/**
+ * @author <a href="mailto:kristian@zenior.no">Kristian Rosenvold</a>
+ */
+public interface SessionStorage extends Id {
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Storage2Impl.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Storage2Impl.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Storage2Impl.java	(revision 0)
@@ -0,0 +1,27 @@
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context.junit4.concurrency.model;
+
+/**
+ * @author <a href="mailto:kristian@zenior*dot*no">Kristian Rosenvold</a>
+ */
+public class Storage2Impl implements RequestStorage {
+    public String id(){
+        return this.toString();
+    }
+
+}
\ No newline at end of file
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Id.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Id.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Id.java	(revision 0)
@@ -0,0 +1,8 @@
+package org.springframework.test.context.junit4.concurrency.model;
+
+/**
+ * @author <a href="mailto:kristian@zenior.no">Kristian Rosenvold</a>
+ */
+public interface Id {
+    String id();
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/RequestStorage.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/RequestStorage.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/RequestStorage.java	(revision 0)
@@ -0,0 +1,7 @@
+package org.springframework.test.context.junit4.concurrency.model;
+
+/**
+ * @author <a href="mailto:kristian@zenior.no">Kristian Rosenvold</a>
+ */
+public interface RequestStorage extends Id {
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Client.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Client.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/model/Client.java	(revision 0)
@@ -0,0 +1,58 @@
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context.junit4.concurrency.model;
+
+import org.springframework.stereotype.Service;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import javax.annotation.Resource;
+
+
+/**
+ * @author <a href="mailto:kristian@zenior*dot*no">Kristian Rosenvold</a>
+ */
+@Service
+public class Client {
+
+    @Resource(name="default")
+	private SessionStorage sessionStorage;
+
+    @Resource(name="default")
+	private SessionStorage sessionStorageAlias;
+
+    @Resource(name="lazyStorage1")
+    private SessionStorage sessionStorageLazy;
+    
+    @Autowired
+	private RequestStorage service2;
+
+    public SessionStorage getSessionStorage() {
+        return sessionStorage;
+    }
+
+    public SessionStorage getSessionStorageLazy() {
+        return sessionStorageLazy;
+    }
+
+    public SessionStorage getSessionStorageAlias() {
+        return sessionStorageAlias;
+    }
+
+    public RequestStorage getRequestStorage() {
+        return service2;
+    }
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/TestContextManagerConcurrencyRunnerTest.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/TestContextManagerConcurrencyRunnerTest.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/TestContextManagerConcurrencyRunnerTest.java	(revision 0)
@@ -0,0 +1,61 @@
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context.junit4.concurrency;
+
+import org.junit.Test;
+import org.springframework.test.context.TestContextManager;
+import org.springframework.test.context.ContextCleaner;
+
+import java.util.concurrent.Callable;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Collection;
+
+/**
+ * Tests concurrency of the TestContextManager
+ *
+ * @author <a href="mailto:kristian@zeniorD0Tno">Kristian Rosenvold</a>
+ */
+
+public class TestContextManagerConcurrencyRunnerTest {
+    // This instance is shared by several threads in code (used from SpringJUnit4ClassRunner)
+    final TestContextManager testContextManager = new TestContextManager(SpringJUnit4ClassRunnerEnvironmentAssumptionsTest.class);
+
+    class MyCallable implements Callable<SpringJUnit4ClassRunnerEnvironmentAssumptionsTest> {
+            public SpringJUnit4ClassRunnerEnvironmentAssumptionsTest call() throws Exception {
+                SpringJUnit4ClassRunnerEnvironmentAssumptionsTest instance = new SpringJUnit4ClassRunnerEnvironmentAssumptionsTest();
+                testContextManager.prepareTestInstance(instance);
+                return instance;
+            }
+    }
+
+    @Test
+    public void testConcurrentConstruction() throws Exception {
+        Collection<Callable<SpringJUnit4ClassRunnerEnvironmentAssumptionsTest>> callableList = new ArrayList<Callable<SpringJUnit4ClassRunnerEnvironmentAssumptionsTest>>();
+        for (int i = 0; i < 1000; i++) {
+            callableList.add( new MyCallable());
+        }
+        ContextCleaner.clearTestContext();
+        
+        List<Future<SpringJUnit4ClassRunnerEnvironmentAssumptionsTest>> futures = Executors.newCachedThreadPool().invokeAll(callableList);
+        for (Future<SpringJUnit4ClassRunnerEnvironmentAssumptionsTest> future : futures ){
+           future.get().testClient1();
+        }
+    }
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/MockContextLoader.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/MockContextLoader.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/MockContextLoader.java	(revision 0)
@@ -0,0 +1,159 @@
+
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.springframework.test.context.junit4.concurrency;
+
+import org.springframework.test.context.support.GenericXmlContextLoader;
+import org.springframework.test.context.ContextCacheKey;
+import org.springframework.context.support.GenericApplicationContext;
+import org.springframework.context.i18n.LocaleContextHolder;
+import org.springframework.context.ApplicationContext;
+import org.springframework.web.context.request.RequestContextHolder;
+import org.springframework.web.context.request.ServletRequestAttributes;
+import org.springframework.web.context.request.RequestContextListener;
+import org.springframework.web.context.request.RequestAttributes;
+import org.springframework.web.context.request.SessionScope;
+import org.springframework.web.context.request.RequestScope;
+import org.springframework.mock.web.MockHttpServletRequest;
+
+import javax.servlet.http.HttpServletRequest;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Locale;
+
+/**
+ * @author <a href="mailto:kristian@zeniorD0Tno">Kristian Rosenvold</a>
+ */
+public class MockContextLoader extends GenericXmlContextLoader {
+
+
+    private static final Map<ContextCacheKey, LocalAttrs> attrCache = new HashMap<ContextCacheKey, LocalAttrs>();
+
+
+    /**
+      * Activates a scope="session" in the beanfactory allowing us to register and retrieve session-scoped
+      * beans in the context. Spring 2.5
+      *
+      * @param context the parent scope
+      */
+     protected void customizeContext(GenericApplicationContext context) {
+         configureSessionInfrastructure();
+         SessionScope testSessionScope = new SessionScope();
+         context.getBeanFactory().registerScope("session", testSessionScope);
+         RequestScope requestScope = new RequestScope();
+         context.getBeanFactory().registerScope("request", requestScope);
+
+     }
+
+    /**
+     * Activates a scope="session" in the beanfactory allowing us to register and retrieve session-scoped
+     * beans in the context. Spring 3.0 adapted
+     *
+     * @param context The application context
+     * @param cacheKey the parent scope
+     */
+    protected void customizeContext(GenericApplicationContext context, ContextCacheKey cacheKey) {
+        customizeContext( context);
+
+        final LocalAttrs value = new LocalAttrs(RequestContextHolder.getRequestAttributes(), LocaleContextHolder.getLocale());
+        System.out.println("cacheKey = " + cacheKey);
+        synchronized ( attrCache){
+        attrCache.put( cacheKey, value);
+        }
+
+
+    }
+
+
+
+    @SuppressWarnings({"UnusedDeclaration"})
+    public void activateForThread(ApplicationContext applicationContext, ContextCacheKey key) {
+        synchronized (attrCache){
+        LocalAttrs localAttrs = attrCache.get( key);
+        // We are in a later thread/invocation. Need to set up spring context for this thread.
+        if (localAttrs == null) {
+            System.out.println("You cannot call this method before getApplicationContext, faking it ?");
+            return;
+        }
+        LocaleContextHolder.setLocale(localAttrs.getLocale(), true);
+        RequestContextHolder.setRequestAttributes(localAttrs.getCopyOfRequestAttributes(), true);
+        }
+
+    }
+
+    /**
+     * Configures the necessary session-infrastructure needed to provide SessionScope.
+     */
+    private void configureSessionInfrastructure() {
+        initRequest();
+    }
+
+    private static void initRequest() {
+        final MockHttpServletRequest request = new MockHttpServletRequest();
+        ServletRequestAttributes attributes = new ServletRequestAttributes(request);
+        request.setAttribute(REQUEST_ATTRIBUTES_ATTRIBUTE, attributes);
+        LocaleContextHolder.setLocale(request.getLocale(), true);
+        RequestContextHolder.setRequestAttributes(attributes, true);
+
+    }
+
+
+    public static void requestCompleted() {
+        @SuppressWarnings({"UnusedDeclaration"}) ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();
+        //requestAttributes.requestCompleted();
+        initRequest();
+    }
+
+    private static final String REQUEST_ATTRIBUTES_ATTRIBUTE =
+            RequestContextListener.class.getName() + ".REQUEST_ATTRIBUTES";
+
+    class LocalAttrs{
+        private RequestAttributes requestAttributes;
+        private Locale locale;
+
+        LocalAttrs(RequestAttributes requestAttributes, Locale locale) {
+            this.requestAttributes = requestAttributes;
+            this.locale = locale;
+        }
+
+        public RequestAttributes getCopyOfRequestAttributes(){
+            if (requestAttributes instanceof ServletRequestAttributes){
+                ServletRequestAttributes original = (ServletRequestAttributes)requestAttributes;
+                ServletRequestAttributes result;
+                HttpServletRequest nextRequest;
+                if (original.getRequest() instanceof MockHttpServletRequest)  {
+                   // Mock request, just clone it.
+                   nextRequest =  new MockHttpServletRequest();  // Maybe need to clone.
+                } else {
+                   nextRequest = original.getRequest();
+                }
+
+                result = new ServletRequestAttributes( nextRequest);
+
+                nextRequest.setAttribute(REQUEST_ATTRIBUTES_ATTRIBUTE, original.getRequest().getAttribute(REQUEST_ATTRIBUTES_ATTRIBUTE));
+
+                return result;
+            }
+            return requestAttributes; // Maybe
+        }
+
+        public Locale getLocale() {
+            return locale;
+        }
+    }
+
+
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/SpringJunit4ClassRunnerConcurrencyRunnerTest.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/SpringJunit4ClassRunnerConcurrencyRunnerTest.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/SpringJunit4ClassRunnerConcurrencyRunnerTest.java	(revision 0)
@@ -0,0 +1,104 @@
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context.junit4.concurrency;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.concurrent.Callable;
+import java.util.concurrent.Future;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import org.junit.runner.notification.RunNotifier;
+import org.junit.runner.notification.RunListener;
+import org.junit.runner.notification.Failure;
+import org.junit.runner.RunWith;
+import org.junit.runner.Description;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.ContextCleaner;
+
+/**
+ * @author <a href="mailto:kristian@zeniorD0Tno">Kristian Rosenvold</a>
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = {
+     "classpath:org/springframework/test/context/junit4/concurrency/model/applicationContext-concurrency-simple.xml"
+}, loader=MockContextLoader.class)
+public class SpringJunit4ClassRunnerConcurrencyRunnerTest {
+
+	@Test
+	public void testFullTestRun() throws Exception {
+        final int NUMTESTS = 100;
+        List<Callable<RunNotifier>> classes = new ArrayList<Callable<RunNotifier>>();
+
+        ContextCleaner.clearTestContext();
+
+        RunNotifier runNotifier = new RunNotifier();
+        CountingRunListener listener = new CountingRunListener();
+        runNotifier.addListener(listener);
+        for (int i = 0; i < NUMTESTS; i ++){
+            classes.add( new JunitTestClassInvoker(SpringJUnit4ClassRunnerEnvironmentAssumptionsTest.class, runNotifier ));
+        }
+        List<Future<RunNotifier>> futures = JunitTestClassInvoker.runAll(classes);
+
+        for (Future<RunNotifier> future : futures){
+            assertNotNull(future.get());
+        }
+
+        assertEquals("No tests should fail, right ?",  0, listener.getFailures());
+        assertEquals("All tests should succeed, right ?",  NUMTESTS * 5, listener.getSuccess());
+    }
+
+    class CountingRunListener extends RunListener
+    {
+        AtomicInteger failures = new AtomicInteger();
+        AtomicInteger success = new AtomicInteger();
+        AtomicInteger assumptionFailures = new AtomicInteger();
+
+        @Override
+        public void testFailure(Failure failure) throws Exception {
+            failures.incrementAndGet();
+            System.out.println("failure.getMessage() = " + failure.getMessage());
+        }
+
+
+        @Override
+        public void testFinished(Description description) throws Exception {
+            success.incrementAndGet();
+        }
+
+        @Override
+        public void testAssumptionFailure(Failure failure) {
+            assumptionFailures.incrementAndGet();
+        }
+
+        public int getFailures() {
+            return failures.intValue();
+        }
+
+        public int getSuccess() {
+            return success.intValue();
+        }
+
+        public int getAssumptionFailures() {
+            return assumptionFailures.intValue();
+        }
+    }
+
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/SpringJUnit4ClassRunnerEnvironmentAssumptionsTest.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/SpringJUnit4ClassRunnerEnvironmentAssumptionsTest.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/SpringJUnit4ClassRunnerEnvironmentAssumptionsTest.java	(revision 0)
@@ -0,0 +1,95 @@
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context.junit4.concurrency;
+
+import org.junit.runner.RunWith;
+import org.junit.Test;
+import static org.junit.Assert.*;
+
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.concurrency.model.Client;
+import org.springframework.test.context.junit4.concurrency.model.SubBean;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import junit.framework.Assert;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * @author <a href="mailto:kristian@zeniorD0Tno">Kristian Rosenvold</a>
+ */
+
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = {
+     "classpath:org/springframework/test/context/junit4/concurrency/model/applicationContext-concurrency-simple.xml"
+}, loader=MockContextLoader.class)
+public class SpringJUnit4ClassRunnerEnvironmentAssumptionsTest {
+    @Autowired
+    Client client;
+    @Autowired
+    SubBean subBean1;
+
+    AtomicInteger runCount = new AtomicInteger();
+
+    private String threadInfo;
+
+    public SpringJUnit4ClassRunnerEnvironmentAssumptionsTest() {
+        threadInfo = getThreadInfo();
+    }
+
+    private String getThreadInfo() {
+        return this.toString() + "Thread" + Thread.currentThread().toString();
+    }
+
+    @Test
+    public void testThatWeReNotRunningInTheSameInstance(){
+         assertEquals(1, runCount.incrementAndGet());
+    }
+
+	@Test
+	public
+	void testThatWeAreCreatedOnTheSameThreadAsWeRun(){
+      assertEquals( getThreadInfo(), this.threadInfo);
+	}
+
+    @Test
+    public void testThatScopeProxiedInstancesAreServedByDifferentInstances(){
+        assertFalse("Expect different instance for differnet bean", client.getSessionStorage().id().equals(client.getSessionStorageLazy().id()));
+        assertEquals("Expect same instance for alias", client.getSessionStorage().id(), client.getSessionStorageAlias().id());
+    }
+
+
+    @Test
+    public void testSubBean1() {
+        Assert.assertNotNull( subBean1.getService());
+        Assert.assertEquals( SubBean.class, subBean1.getClass());
+    }
+
+    @Test
+    public void testClient1() {
+        Assert.assertNotNull( "Object is supposed to be autowired (1) !!!", client);
+        Assert.assertNotNull( "Object is supposed to be autowired (2) !!!", client.getSessionStorage());
+        Assert.assertNotNull("Object is supposed to be autowired (3) !!!",  client.getSessionStorageAlias());
+        Assert.assertNotNull( "Object is supposed to be autowired (4) !!!", client.getSessionStorageLazy());
+        Assert.assertNotNull( "Object is supposed to be autowired (5) !!!", client.getRequestStorage());
+        Assert.assertNotNull( "Object is supposed to be autowired (6) !!!", subBean1);
+        Assert.assertNotNull( "Object is supposed to be autowired (7) !!!", subBean1.getService());
+        Assert.assertEquals( "Object is supposed to be autowired (8) !!!", SubBean.class, subBean1.getClass());
+    }
+
+
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/JunitTestClassInvoker.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/JunitTestClassInvoker.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/junit4/concurrency/JunitTestClassInvoker.java	(revision 0)
@@ -0,0 +1,71 @@
+
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.springframework.test.context.junit4.concurrency;
+
+import org.junit.runner.notification.RunNotifier;
+import org.junit.runners.model.InitializationError;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.TestContextManager;
+
+import java.util.concurrent.Executors;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Callable;
+import java.util.concurrent.Future;
+import java.util.Collection;
+import java.util.List;
+
+/**
+ * Encapsulates the threaded running of tests from here.
+ * @author <a href="mailto:kristian@zeniorD0Tno">Kristian Rosenvold</a>
+ */
+public class JunitTestClassInvoker implements Callable<RunNotifier> {
+    private final Class classTorun;
+    private final RunNotifier runNotifier;
+
+    public JunitTestClassInvoker(Class classtoRun, RunNotifier runNotifier){
+        this.classTorun = classtoRun;
+        this.runNotifier = runNotifier;
+    }
+
+    public RunNotifier call() throws Exception {
+        MyClassRunner myClassRunner = new MyClassRunner(classTorun);
+        myClassRunner.run(runNotifier);
+        return runNotifier;
+    }
+
+    public static  List<Future<RunNotifier>> runAll(Collection<Callable<RunNotifier>> invokerEnumerable){
+        final ExecutorService executorService = Executors.newCachedThreadPool();
+        try {
+            return executorService.invokeAll(invokerEnumerable);
+        } catch (InterruptedException e) {
+            throw new RuntimeException(e);
+        } finally {
+            executorService.shutdown();
+        }
+    }
+
+    class MyClassRunner extends SpringJUnit4ClassRunner {
+        MyClassRunner(Class<?> aClass) throws InitializationError {
+            super(aClass);
+        }
+
+        public TestContextManager getTestContextManager4Test(){
+
+            return super.getTestContextManager();
+        }
+    }
+}
Index: org.springframework.test/src/test/java/org/springframework/test/context/ContextCleaner.java
===================================================================
--- org.springframework.test/src/test/java/org/springframework/test/context/ContextCleaner.java	(revision 0)
+++ org.springframework.test/src/test/java/org/springframework/test/context/ContextCleaner.java	(revision 0)
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2002-2009 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context;
+
+/**
+ * @author <a href="mailto:kristian@zeniorD0Tno">Kristian Rosenvold</a>
+ */
+public class ContextCleaner {
+        public static void clearTestContext(){
+            ContextCache cache = TestContextManager.contextCache;
+            cache.clear();
+
+        }
+
+}
Index: org.springframework.test/src/test/resources/org/springframework/test/context/junit4/concurrency/model/applicationContext-concurrency-simple.xml
===================================================================
--- org.springframework.test/src/test/resources/org/springframework/test/context/junit4/concurrency/model/applicationContext-concurrency-simple.xml	(revision 0)
+++ org.springframework.test/src/test/resources/org/springframework/test/context/junit4/concurrency/model/applicationContext-concurrency-simple.xml	(revision 0)
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+    <beans xmlns="http://www.springframework.org/schema/beans"
+           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+           xmlns:context="http://www.springframework.org/schema/context"
+           xmlns:p="http://www.springframework.org/schema/p"
+           xmlns:util="http://www.springframework.org/schema/util"
+           xmlns:aop="http://www.springframework.org/schema/aop"
+           xsi:schemaLocation="http://www.springframework.org/schema/beans
+           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
+           http://www.springframework.org/schema/context
+           http://www.springframework.org/schema/context/spring-context-2.5.xsd
+           http://www.springframework.org/schema/util
+           http://www.springframework.org/schema/util/spring-util-2.5.xsd
+           http://www.springframework.org/schema/aop
+           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
+
+    <context:component-scan base-package="org.springframework.test.context.junit4.concurrency.model"/>
+
+    <bean name="default" class="org.springframework.test.context.junit4.concurrency.model.Storage1Impl" scope="session">
+        <aop:scoped-proxy proxy-target-class="false"/>
+    </bean>
+    <bean name="lazyStorage1" lazy-init="true" class="org.springframework.test.context.junit4.concurrency.model.Storage1Impl" scope="session" >
+        <aop:scoped-proxy proxy-target-class="false"/>
+    </bean>
+
+    <bean class="org.springframework.test.context.junit4.concurrency.model.Storage2Impl" scope="request">
+        <aop:scoped-proxy proxy-target-class="false"/>
+    </bean>
+</beans>
Index: org.springframework.test/src/main/java/org/springframework/test/context/ContextCache.java
===================================================================
--- org.springframework.test/src/main/java/org/springframework/test/context/ContextCache.java	(revision 1417)
+++ org.springframework.test/src/main/java/org/springframework/test/context/ContextCache.java	(working copy)
@@ -46,8 +46,8 @@
 	/**
 	 * Map of context keys to Spring ApplicationContext instances.
 	 */
-	private final Map<String, ApplicationContext> contextKeyToContextMap =
-			new ConcurrentHashMap<String, ApplicationContext>();
+	private final Map<ContextCacheKey, ApplicationContext> contextKeyToContextMap =
+			new ConcurrentHashMap<ContextCacheKey, ApplicationContext>();
 
 	private int hitCount;
 
@@ -73,8 +73,9 @@
 	/**
 	 * Return whether there is a cached context for the given key.
 	 * @param key the context key (never <code>null</code>)
+	 * @return true if the cache contains an entry for the key
 	 */
-	boolean contains(String key) {
+	boolean contains(ContextCacheKey key) {
 		Assert.notNull(key, "Key must not be null");
 		return this.contextKeyToContextMap.containsKey(key);
 	}
@@ -88,7 +89,7 @@
 	 * or <code>null</code> if not found in the cache.
 	 * @see #remove
 	 */
-	ApplicationContext get(String key) {
+	ApplicationContext get(ContextCacheKey key) {
 		Assert.notNull(key, "Key must not be null");
 		ApplicationContext context = this.contextKeyToContextMap.get(key);
 		if (context == null) {
@@ -119,6 +120,7 @@
 	/**
 	 * Get the overall hit count for this cache. A <em>hit</em> is an access
 	 * to the cache, which returned a non-null context for a queried key.
+	 * @return the number of cache hits
 	 */
 	int getHitCount() {
 		return this.hitCount;
@@ -128,6 +130,7 @@
 	 * Get the overall miss count for this cache. A <em>miss</em> is an
 	 * access to the cache, which returned a <code>null</code> context for a
 	 * queried key.
+	 * @return the number of cache misses
 	 */
 	int getMissCount() {
 		return this.missCount;
@@ -138,7 +141,7 @@
 	 * @param key the context key (never <code>null</code>)
 	 * @param context the ApplicationContext instance (never <code>null</code>)
 	 */
-	void put(String key, ApplicationContext context) {
+	void put(ContextCacheKey key, ApplicationContext context) {
 		Assert.notNull(key, "Key must not be null");
 		Assert.notNull(context, "ApplicationContext must not be null");
 		this.contextKeyToContextMap.put(key, context);
@@ -151,7 +154,7 @@
 	 * or <code>null</code> if not found in the cache.
 	 * @see #setDirty
 	 */
-	ApplicationContext remove(String key) {
+	ApplicationContext remove(ContextCacheKey key) {
 		return this.contextKeyToContextMap.remove(key);
 	}
 
@@ -166,7 +169,7 @@
 	 * @param key the context key (never <code>null</code>)
 	 * @see #remove
 	 */
-	void setDirty(String key) {
+	void setDirty(ContextCacheKey key) {
 		Assert.notNull(key, "Key must not be null");
 		ApplicationContext context = remove(key);
 		if (context instanceof ConfigurableApplicationContext) {
@@ -178,6 +181,7 @@
 	 * Determine the number of contexts currently stored in the cache. If the
 	 * cache contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
 	 * <tt>Integer.MAX_VALUE</tt>.
+	 * @return the size of the cache
 	 */
 	int size() {
 		return this.contextKeyToContextMap.size();
Index: org.springframework.test/src/main/java/org/springframework/test/context/TestClassContext.java
===================================================================
--- org.springframework.test/src/main/java/org/springframework/test/context/TestClassContext.java	(revision 0)
+++ org.springframework.test/src/main/java/org/springframework/test/context/TestClassContext.java	(revision 0)
@@ -0,0 +1,285 @@
+/*
+ * Copyright 2002-2008 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.test.context;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.springframework.beans.BeanUtils;
+import org.springframework.context.ApplicationContext;
+import org.springframework.core.AttributeAccessorSupport;
+import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.core.style.ToStringCreator;
+import org.springframework.util.Assert;
+import org.springframework.util.ObjectUtils;
+import org.springframework.util.StringUtils;
+
+/**
+ * TestClassContext encapsulates the class-invariant context in which a test is executed, agnostic of
+ * the actual testing framework in use.
+ * 
+ * @author Sam Brannen
+ * @author Juergen Hoeller
+ * @author Kristian Rosenvold
+ * @since 2.5
+ */
+public class TestClassContext extends AttributeAccessorSupport {
+
+	private static final long serialVersionUID = -5827157174866681233L;
+
+	private static final String STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME = "org.springframework.test.context.support.GenericXmlContextLoader";
+
+	private static final Log logger = LogFactory.getLog(TestClassContext.class);
+
+	private final ContextCache contextCache;
+
+	private final ContextLoader contextLoader;
+
+	private final String[] locations;
+
+	private final Class<?> testClass;
+
+
+
+    /**
+	 * Construct a new test context for the supplied {@link Class test class}
+	 * and {@link org.springframework.test.context.ContextCache context cache} and parse the corresponding
+	 * {@link org.springframework.test.context.ContextConfiguration &#064;ContextConfiguration} annotation, if
+	 * present.
+	 * <p>
+	 * If the supplied class name for the default ContextLoader is
+	 * <code>null</code> or <em>empty</em> and no <code>ContextLoader</code>
+	 * class is explicitly supplied via the
+	 * <code>&#064;ContextConfiguration</code> annotation, a
+	 * {@link org.springframework.test.context.support.GenericXmlContextLoader
+	 * GenericXmlContextLoader} will be used instead.
+	 * </p>
+	 *
+	 * @param testClass the test class for which the test context should be
+	 * constructed (must not be <code>null</code>)
+	 * @param contextCache the context cache from which the constructed test
+	 * context should retrieve application contexts (must not be
+	 * <code>null</code>)
+	 * @param defaultContextLoaderClassName the name of the default
+	 * <code>ContextLoader</code> class to use (may be <code>null</code>)
+	 */
+	@SuppressWarnings("unchecked")
+    TestClassContext(Class<?> testClass, ContextCache contextCache, String defaultContextLoaderClassName) {
+		Assert.notNull(testClass, "Test class must not be null");
+		Assert.notNull(contextCache, "ContextCache must not be null");
+
+		if (!StringUtils.hasText(defaultContextLoaderClassName)) {
+			defaultContextLoaderClassName = STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME;
+		}
+
+		ContextConfiguration contextConfiguration = testClass.getAnnotation(ContextConfiguration.class);
+		String[] locations = null;
+		ContextLoader contextLoader = null;
+
+		if (contextConfiguration == null) {
+			if (logger.isInfoEnabled()) {
+				logger.info("@ContextConfiguration not found for class [" + testClass + "]");
+			}
+		}
+		else {
+			if (logger.isTraceEnabled()) {
+				logger.trace("Retrieved @ContextConfiguration [" + contextConfiguration + "] for class [" + testClass
+						+ "]");
+			}
+
+			Class<? extends ContextLoader> contextLoaderClass = contextConfiguration.loader();
+			if (ContextLoader.class.equals(contextLoaderClass)) {
+				try {
+					if (logger.isTraceEnabled()) {
+						logger.trace("Using default ContextLoader class [" + defaultContextLoaderClassName
+								+ "] for @ContextConfiguration [" + contextConfiguration + "] and class [" + testClass
+								+ "]");
+					}
+					contextLoaderClass = (Class<? extends ContextLoader>) getClass().getClassLoader().loadClass(
+						defaultContextLoaderClassName);
+				}
+				catch (ClassNotFoundException ex) {
+					throw new IllegalStateException("Could not load default ContextLoader class ["
+							+ defaultContextLoaderClassName + "]. Specify @ContextConfiguration's 'loader' "
+							+ "attribute or make the default loader class available.");
+				}
+			}
+			contextLoader = (ContextLoader) BeanUtils.instantiateClass(contextLoaderClass);
+			locations = retrieveContextLocations(contextLoader, testClass);
+		}
+
+		this.testClass = testClass;
+		this.contextCache = contextCache;
+		this.contextLoader = contextLoader;
+		this.locations = locations;
+	}
+
+	/**
+	 * Retrieve {@link org.springframework.context.ApplicationContext} resource locations for the supplied
+	 * {@link Class class}, using the supplied {@link org.springframework.test.context.ContextLoader} to
+	 * {@link org.springframework.test.context.ContextLoader#processLocations(Class, String[])}  the
+	 * locations.
+	 * <p>
+	 * Note that the {@link org.springframework.test.context.ContextConfiguration#inheritLocations()
+	 * inheritLocations} flag of {@link org.springframework.test.context.ContextConfiguration
+	 * &#064;ContextConfiguration} will be taken into consideration.
+	 * Specifically, if the <code>inheritLocations</code> flag is set to
+	 * <code>true</code>, locations defined in the annotated class will be
+	 * appended to the locations defined in superclasses. &#064;param
+	 * contextLoader the ContextLoader to use for processing the locations (must
+	 * not be <code>null</code>)
+	 *
+	 * @param contextLoader The contextloader to use for processing locations
+	 * @param clazz the class for which to retrieve the resource locations (must
+	 * not be <code>null</code>)
+	 * @return the list of ApplicationContext resource locations for the
+	 * specified class, including locations from superclasses if appropriate
+	 * @throws IllegalArgumentException if {@link org.springframework.test.context.ContextConfiguration
+	 * &#064;ContextConfiguration} is not <em>present</em> on the supplied class
+	 */
+	private String[] retrieveContextLocations(ContextLoader contextLoader, Class<?> clazz) {
+		Assert.notNull(contextLoader, "ContextLoader must not be null");
+		Assert.notNull(clazz, "Class must not be null");
+
+		List<String> locationsList = new ArrayList<String>();
+		Class<ContextConfiguration> annotationType = ContextConfiguration.class;
+		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz);
+		Assert.notNull(declaringClass, "Could not find an 'annotation declaring class' for annotation type ["
+				+ annotationType + "] and class [" + clazz + "]");
+
+		while (declaringClass != null) {
+			ContextConfiguration contextConfiguration = declaringClass.getAnnotation(annotationType);
+			if (logger.isTraceEnabled()) {
+				logger.trace("Retrieved @ContextConfiguration [" + contextConfiguration + "] for declaring class ["
+						+ declaringClass + "]");
+			}
+
+			String[] valueLocations = contextConfiguration.value();
+			String[] locations = contextConfiguration.locations();
+			if (!ObjectUtils.isEmpty(valueLocations) && !ObjectUtils.isEmpty(locations)) {
+				String msg = "Test class ["
+						+ declaringClass
+						+ "] has been configured with @ContextConfiguration's 'value' ["
+						+ ObjectUtils.nullSafeToString(valueLocations)
+						+ "] and 'locations' ["
+						+ ObjectUtils.nullSafeToString(locations)
+						+ "] attributes. Only one declaration of resource locations is permitted per @ContextConfiguration annotation.";
+				logger.error(msg);
+				throw new IllegalStateException(msg);
+			}
+			else if (!ObjectUtils.isEmpty(valueLocations)) {
+				locations = valueLocations;
+			}
+
+			locations = contextLoader.processLocations(declaringClass, locations);
+			locationsList.addAll(0, Arrays.<String> asList(locations));
+			declaringClass = contextConfiguration.inheritLocations() ? AnnotationUtils.findAnnotationDeclaringClass(
+				annotationType, declaringClass.getSuperclass()) : null;
+		}
+
+		return locationsList.toArray(new String[locationsList.size()]);
+	}
+
+	/**
+	 * Build an ApplicationContext for this test context using the configured
+	 * ContextLoader and resource locations.
+	 *
+	 * @throws Exception if an error occurs while building the application
+	 * context
+	 * @return an application context
+	 */
+	private ApplicationContext loadApplicationContext() throws Exception {
+		Assert.notNull(this.contextLoader, "Can not build an ApplicationContext with a NULL 'contextLoader'. "
+				+ "Consider annotating your test class with @ContextConfiguration.");
+		Assert.notNull(this.locations, "Can not build an ApplicationContext with a NULL 'locations' array. "
+				+ "Consider annotating your test class with @ContextConfiguration.");
+		return this.contextLoader.loadContext(this.locations);
+	}
+
+	/**
+	 * Convert the supplied context <code>key</code> to a String representation
+	 * for use in caching, logging, etc.
+	 * @return a key
+	 */
+	private ContextCacheKey contextKeyString(Serializable key) {
+		return new ContextCacheKey( key);
+	}
+
+	/**
+	 * Get the {@link org.springframework.context.ApplicationContext application context} for this test
+	 * context, possibly cached.
+	 *
+	 * @return the application context; may be <code>null</code> if the current
+	 * test context is not configured to use an application context
+	 * @throws IllegalStateException if an error occurs while retrieving the
+	 * application context
+	 */
+	public ApplicationContext getApplicationContext() {
+		synchronized (this.contextCache) {
+            final ContextCacheKey key = contextKeyString(this.locations);
+            ApplicationContext context = this.contextCache.get(key);
+			if (context == null) {
+				try {
+					context = loadApplicationContext();
+					this.contextCache.put(key, context);
+				}
+				catch (Exception ex) {
+					throw new IllegalStateException("Failed to load ApplicationContext", ex);
+				}
+			}
+			if (contextLoader != null) contextLoader.activateForThread(null, key);
+			return context;
+		}
+	}
+
+    /**
+	 * Get the {@link Class test class} for this test context.
+	 *
+	 * @return the test class (never <code>null</code>)
+	 */
+	public final Class<?> getTestClass() {
+		return this.testClass;
+	}
+
+
+	/**
+	 * Call this method to signal that the {@link org.springframework.context.ApplicationContext application
+	 * context} associated with this test context is <em>dirty</em> and should
+	 * be reloaded. Do this if a test has modified the context (for example, by
+	 * replacing a bean definition).
+	 */
+	public void markApplicationContextDirty() {
+		this.contextCache.setDirty(contextKeyString(this.locations));
+	}
+
+	/**
+	 * Provide a String representation of this test context's state.
+	 */
+	@Override
+	public String toString() {
+		return new ToStringCreator(this)//
+		.append("testClass", this.testClass)//
+		.append("locations", this.locations)//
+		.toString();
+	}
+
+}
\ No newline at end of file
Index: org.springframework.test/src/main/java/org/springframework/test/context/ContextLoader.java
===================================================================
--- org.springframework.test/src/main/java/org/springframework/test/context/ContextLoader.java	(revision 1417)
+++ org.springframework.test/src/main/java/org/springframework/test/context/ContextLoader.java	(working copy)
@@ -80,4 +80,19 @@
 	 */
 	ApplicationContext loadContext(String... locations) throws Exception;
 
+	/**
+	 * Activates this context for the current thread.
+	 *
+	 * This method is called every time an applicationContext is assigned to a thread,
+	 * including the first time the context is created. The thread may have previously been assigned
+	 *  a different applicationContext.
+	 *
+	 * This method only needs to be implemented if you use web scopes AND run multi-threaded tests.
+	 * 
+	 * @param applicationContext The context that is to be activated
+	 * @param contextCacheKey The cache key that the context loader can use to cache additional data
+	 * @since 3.0
+	 */
+	void activateForThread(ApplicationContext applicationContext, ContextCacheKey contextCacheKey);
+
 }
Index: org.springframework.test/src/main/java/org/springframework/test/context/TestContextManager.java
===================================================================
--- org.springframework.test/src/main/java/org/springframework/test/context/TestContextManager.java	(revision 1417)
+++ org.springframework.test/src/main/java/org/springframework/test/context/TestContextManager.java	(working copy)
@@ -81,7 +81,8 @@
 	 */
 	static final ContextCache contextCache = new ContextCache();
 
-	private final TestContext testContext;
+    private final TestClassContext testClassContext;
+	private final ThreadLocal<TestContext> testContext = new ThreadLocal<TestContext>();
 
 	private final List<TestExecutionListener> testExecutionListeners = new ArrayList<TestExecutionListener>();
 
@@ -89,6 +90,7 @@
 	/**
 	 * Delegates to {@link #TestContextManager(Class, String)} with a value of
 	 * <code>null</code> for the default <code>ContextLoader</code> class name.
+     * @param testClass The subject under test
 	 */
 	public TestContextManager(Class<?> testClass) {
 		this(testClass, null);
@@ -97,7 +99,7 @@
 	/**
 	 * Constructs a new <code>TestContextManager</code> for the specified
 	 * {@link Class test class} and automatically
-	 * {@link #registerTestExecutionListeners(TestExecutionListener...)
+	 * {@link #registerTestExecutionListeners(TestExecutionListener[])}
 	 * registers} the {@link TestExecutionListener TestExecutionListeners}
 	 * configured for the test class via the {@link TestExecutionListeners
 	 * &#064;TestExecutionListeners} annotation.
@@ -105,26 +107,31 @@
 	 * @param testClass the test class to be managed
 	 * @param defaultContextLoaderClassName the name of the default
 	 * <code>ContextLoader</code> class to use (may be <code>null</code>)
-	 * @see #registerTestExecutionListeners(TestExecutionListener...)
+	 * @see #registerTestExecutionListeners(TestExecutionListener[]) 
 	 * @see #retrieveTestExecutionListeners(Class)
 	 */
 	public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {
-		this.testContext = new TestContext(testClass, contextCache, defaultContextLoaderClassName);
+        testClassContext = new TestClassContext(testClass,contextCache, defaultContextLoaderClassName );
 		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass));
 	}
 
 	/**
 	 * Returns the {@link TestContext} managed by this
 	 * <code>TestContextManager</code>.
+     * @return The current testcontext for the thread
 	 */
 	protected final TestContext getTestContext() {
-		return this.testContext;
+        if (testContext.get() == null){
+            throw new IllegalStateException("At this stage we expect the testcontext to be set up in TrheadLocal");
+        }
+		return this.testContext.get();
 	}
 
 	/**
 	 * Register the supplied {@link TestExecutionListener
 	 * TestExecutionListeners} by appending them to the set of listeners used by
 	 * this <code>TestContextManager</code>.
+     * @param testExecutionListeners The test execution listeners
 	 */
 	public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {
 		for (TestExecutionListener listener : testExecutionListeners) {
@@ -139,6 +146,7 @@
 	 * Gets an {@link Collections#unmodifiableList(List) unmodifiable} copy of
 	 * the {@link TestExecutionListener TestExecutionListeners} registered for
 	 * this <code>TestContextManager</code>.
+     * @return A list of test execution listeners
 	 */
 	public final List<TestExecutionListener> getTestExecutionListeners() {
 		return Collections.unmodifiableList(this.testExecutionListeners);
@@ -217,6 +225,7 @@
 
 	/**
 	 * Determine the default {@link TestExecutionListener} classes.
+     * @return The test execution listeners
 	 */
 	@SuppressWarnings("unchecked")
 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {
@@ -255,16 +264,19 @@
 	 * exception
 	 * @see #getTestExecutionListeners()
 	 */
-	public void prepareTestInstance(Object testInstance) throws Exception {
+	public synchronized void prepareTestInstance(Object testInstance) throws Exception {
+
+ //       ApplicationContext applicationContext = testClassContext.getApplicationContext();
 		Assert.notNull(testInstance, "testInstance must not be null");
 		if (logger.isTraceEnabled()) {
 			logger.trace("prepareTestInstance(): instance [" + testInstance + "]");
 		}
-		getTestContext().updateState(testInstance, null, null);
+        TestContext testContext = new TestContext(testClassContext, testInstance, null);
+        this.testContext.set( testContext);
 
 		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {
 			try {
-				testExecutionListener.prepareTestInstance(getTestContext());
+				testExecutionListener.prepareTestInstance(testContext);
 			}
 			catch (Exception ex) {
 				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener
@@ -301,8 +313,9 @@
 		if (logger.isTraceEnabled()) {
 			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]");
 		}
-		getTestContext().updateState(testInstance, testMethod, null);
 
+        testContext.set(new TestContext(testClassContext, testInstance, testMethod));
+
 		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {
 			try {
 				testExecutionListener.beforeTestMethod(getTestContext());
@@ -350,7 +363,7 @@
 			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["
 					+ exception + "]");
 		}
-		getTestContext().updateState(testInstance, testMethod, exception);
+		getTestContext().addException(exception);
 
 		// Traverse the TestExecutionListeners in reverse order to ensure proper
 		// "wrapper"-style execution of listeners.
Index: org.springframework.test/src/main/java/org/springframework/test/context/ContextCacheKey.java
===================================================================
--- org.springframework.test/src/main/java/org/springframework/test/context/ContextCacheKey.java	(revision 0)
+++ org.springframework.test/src/main/java/org/springframework/test/context/ContextCacheKey.java	(revision 0)
@@ -0,0 +1,41 @@
+package org.springframework.test.context;
+
+import java.io.Serializable;
+
+import org.springframework.util.ObjectUtils;
+
+/**
+ * A key that a custom context loader can use to cache own data.
+ * @author <a href="mailto:kristian@zeniorD0Tno">Kristian Rosenvold</a>
+ * */
+public class ContextCacheKey {
+	private final String key;
+
+	public ContextCacheKey(Serializable key) {
+		this.key = ObjectUtils.nullSafeToString(key); // + contextLoader.getClass().getName();
+	}
+
+	@SuppressWarnings({"RedundantIfStatement"})
+	@Override
+	public boolean equals(Object o) {
+		if (this == o) {
+			return true;
+		}
+		if (o == null || getClass() != o.getClass()) {
+			return false;
+		}
+
+		ContextCacheKey key1 = (ContextCacheKey) o;
+
+		if (key != null ? !key.equals(key1.key) : key1.key != null) {
+			return false;
+		}
+
+		return true;
+	}
+
+	@Override
+	public int hashCode() {
+		return key != null ? key.hashCode() : 0;
+	}
+}
Index: org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java
===================================================================
--- org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java	(revision 1417)
+++ org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java	(working copy)
@@ -16,225 +16,42 @@
 
 package org.springframework.test.context;
 
-import java.io.Serializable;
 import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.springframework.beans.BeanUtils;
 import org.springframework.context.ApplicationContext;
 import org.springframework.core.AttributeAccessorSupport;
-import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.core.style.ToStringCreator;
-import org.springframework.util.Assert;
-import org.springframework.util.ObjectUtils;
-import org.springframework.util.StringUtils;
 
 /**
  * TestContext encapsulates the context in which a test is executed, agnostic of
- * the actual testing framework in use.
+ * the actual testing framework in use. This (mutable) object represents the data for one
+ * test method invocation.
  * 
  * @author Sam Brannen
  * @author Juergen Hoeller
+ * @author Kristian Rosenvold
  * @since 2.5
  */
 public class TestContext extends AttributeAccessorSupport {
 
 	private static final long serialVersionUID = -5827157174866681233L;
 
-	private static final String STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME = "org.springframework.test.context.support.GenericXmlContextLoader";
+    private final TestClassContext testClassContext;
 
-	private static final Log logger = LogFactory.getLog(TestContext.class);
+	private final Object testInstance;
 
-	private final ContextCache contextCache;
+	private final Method testMethod;
 
-	private final ContextLoader contextLoader;
-
-	private final String[] locations;
-
-	private final Class<?> testClass;
-
-	private Object testInstance;
-
-	private Method testMethod;
-
 	private Throwable testException;
 
 
-	/**
-	 * Delegates to {@link #TestContext(Class, ContextCache, String)} with a
-	 * value of <code>null</code> for the default <code>ContextLoader</code>
-	 * class name.
-	 */
-	TestContext(Class<?> testClass, ContextCache contextCache) {
-		this(testClass, contextCache, null);
-	}
+    public TestContext(TestClassContext testClassContext, Object testInstance, Method testMethod) {
+        this.testClassContext = testClassContext;
+        this.testInstance = testInstance;
+        this.testMethod = testMethod;
+    }
 
-	/**
-	 * Construct a new test context for the supplied {@link Class test class}
-	 * and {@link ContextCache context cache} and parse the corresponding
-	 * {@link ContextConfiguration &#064;ContextConfiguration} annotation, if
-	 * present.
-	 * <p>
-	 * If the supplied class name for the default ContextLoader is
-	 * <code>null</code> or <em>empty</em> and no <code>ContextLoader</code>
-	 * class is explicitly supplied via the
-	 * <code>&#064;ContextConfiguration</code> annotation, a
-	 * {@link org.springframework.test.context.support.GenericXmlContextLoader
-	 * GenericXmlContextLoader} will be used instead.
-	 * </p>
-	 * 
-	 * @param testClass the test class for which the test context should be
-	 * constructed (must not be <code>null</code>)
-	 * @param contextCache the context cache from which the constructed test
-	 * context should retrieve application contexts (must not be
-	 * <code>null</code>)
-	 * @param defaultContextLoaderClassName the name of the default
-	 * <code>ContextLoader</code> class to use (may be <code>null</code>)
-	 */
-	@SuppressWarnings("unchecked")
-	TestContext(Class<?> testClass, ContextCache contextCache, String defaultContextLoaderClassName) {
-		Assert.notNull(testClass, "Test class must not be null");
-		Assert.notNull(contextCache, "ContextCache must not be null");
-
-		if (!StringUtils.hasText(defaultContextLoaderClassName)) {
-			defaultContextLoaderClassName = STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME;
-		}
-
-		ContextConfiguration contextConfiguration = testClass.getAnnotation(ContextConfiguration.class);
-		String[] locations = null;
-		ContextLoader contextLoader = null;
-
-		if (contextConfiguration == null) {
-			if (logger.isInfoEnabled()) {
-				logger.info("@ContextConfiguration not found for class [" + testClass + "]");
-			}
-		}
-		else {
-			if (logger.isTraceEnabled()) {
-				logger.trace("Retrieved @ContextConfiguration [" + contextConfiguration + "] for class [" + testClass
-						+ "]");
-			}
-
-			Class<? extends ContextLoader> contextLoaderClass = contextConfiguration.loader();
-			if (ContextLoader.class.equals(contextLoaderClass)) {
-				try {
-					if (logger.isTraceEnabled()) {
-						logger.trace("Using default ContextLoader class [" + defaultContextLoaderClassName
-								+ "] for @ContextConfiguration [" + contextConfiguration + "] and class [" + testClass
-								+ "]");
-					}
-					contextLoaderClass = (Class<? extends ContextLoader>) getClass().getClassLoader().loadClass(
-						defaultContextLoaderClassName);
-				}
-				catch (ClassNotFoundException ex) {
-					throw new IllegalStateException("Could not load default ContextLoader class ["
-							+ defaultContextLoaderClassName + "]. Specify @ContextConfiguration's 'loader' "
-							+ "attribute or make the default loader class available.");
-				}
-			}
-			contextLoader = (ContextLoader) BeanUtils.instantiateClass(contextLoaderClass);
-			locations = retrieveContextLocations(contextLoader, testClass);
-		}
-
-		this.testClass = testClass;
-		this.contextCache = contextCache;
-		this.contextLoader = contextLoader;
-		this.locations = locations;
-	}
-
-	/**
-	 * Retrieve {@link ApplicationContext} resource locations for the supplied
-	 * {@link Class class}, using the supplied {@link ContextLoader} to
-	 * {@link ContextLoader#processLocations(Class, String...) process} the
-	 * locations.
-	 * <p>
-	 * Note that the {@link ContextConfiguration#inheritLocations()
-	 * inheritLocations} flag of {@link ContextConfiguration
-	 * &#064;ContextConfiguration} will be taken into consideration.
-	 * Specifically, if the <code>inheritLocations</code> flag is set to
-	 * <code>true</code>, locations defined in the annotated class will be
-	 * appended to the locations defined in superclasses. &#064;param
-	 * contextLoader the ContextLoader to use for processing the locations (must
-	 * not be <code>null</code>)
-	 * 
-	 * @param clazz the class for which to retrieve the resource locations (must
-	 * not be <code>null</code>)
-	 * @return the list of ApplicationContext resource locations for the
-	 * specified class, including locations from superclasses if appropriate
-	 * @throws IllegalArgumentException if {@link ContextConfiguration
-	 * &#064;ContextConfiguration} is not <em>present</em> on the supplied class
-	 */
-	private String[] retrieveContextLocations(ContextLoader contextLoader, Class<?> clazz) {
-		Assert.notNull(contextLoader, "ContextLoader must not be null");
-		Assert.notNull(clazz, "Class must not be null");
-
-		List<String> locationsList = new ArrayList<String>();
-		Class<ContextConfiguration> annotationType = ContextConfiguration.class;
-		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz);
-		Assert.notNull(declaringClass, "Could not find an 'annotation declaring class' for annotation type ["
-				+ annotationType + "] and class [" + clazz + "]");
-
-		while (declaringClass != null) {
-			ContextConfiguration contextConfiguration = declaringClass.getAnnotation(annotationType);
-			if (logger.isTraceEnabled()) {
-				logger.trace("Retrieved @ContextConfiguration [" + contextConfiguration + "] for declaring class ["
-						+ declaringClass + "]");
-			}
-
-			String[] valueLocations = contextConfiguration.value();
-			String[] locations = contextConfiguration.locations();
-			if (!ObjectUtils.isEmpty(valueLocations) && !ObjectUtils.isEmpty(locations)) {
-				String msg = "Test class ["
-						+ declaringClass
-						+ "] has been configured with @ContextConfiguration's 'value' ["
-						+ ObjectUtils.nullSafeToString(valueLocations)
-						+ "] and 'locations' ["
-						+ ObjectUtils.nullSafeToString(locations)
-						+ "] attributes. Only one declaration of resource locations is permitted per @ContextConfiguration annotation.";
-				logger.error(msg);
-				throw new IllegalStateException(msg);
-			}
-			else if (!ObjectUtils.isEmpty(valueLocations)) {
-				locations = valueLocations;
-			}
-
-			locations = contextLoader.processLocations(declaringClass, locations);
-			locationsList.addAll(0, Arrays.<String> asList(locations));
-			declaringClass = contextConfiguration.inheritLocations() ? AnnotationUtils.findAnnotationDeclaringClass(
-				annotationType, declaringClass.getSuperclass()) : null;
-		}
-
-		return locationsList.toArray(new String[locationsList.size()]);
-	}
-
-	/**
-	 * Build an ApplicationContext for this test context using the configured
-	 * ContextLoader and resource locations.
-	 * 
-	 * @throws Exception if an error occurs while building the application
-	 * context
-	 */
-	private ApplicationContext loadApplicationContext() throws Exception {
-		Assert.notNull(this.contextLoader, "Can not build an ApplicationContext with a NULL 'contextLoader'. "
-				+ "Consider annotating your test class with @ContextConfiguration.");
-		Assert.notNull(this.locations, "Can not build an ApplicationContext with a NULL 'locations' array. "
-				+ "Consider annotating your test class with @ContextConfiguration.");
-		return this.contextLoader.loadContext(this.locations);
-	}
-
-	/**
-	 * Convert the supplied context <code>key</code> to a String representation
-	 * for use in caching, logging, etc.
-	 */
-	private String contextKeyString(Serializable key) {
-		return ObjectUtils.nullSafeToString(key);
-	}
-
-	/**
+    /**
 	 * Get the {@link ApplicationContext application context} for this test
 	 * context, possibly cached.
 	 * 
@@ -244,19 +61,7 @@
 	 * application context
 	 */
 	public ApplicationContext getApplicationContext() {
-		synchronized (this.contextCache) {
-			ApplicationContext context = this.contextCache.get(contextKeyString(this.locations));
-			if (context == null) {
-				try {
-					context = loadApplicationContext();
-					this.contextCache.put(contextKeyString(this.locations), context);
-				}
-				catch (Exception ex) {
-					throw new IllegalStateException("Failed to load ApplicationContext", ex);
-				}
-			}
-			return context;
-		}
+        return testClassContext.getApplicationContext();
 	}
 
 	/**
@@ -265,7 +70,7 @@
 	 * @return the test class (never <code>null</code>)
 	 */
 	public final Class<?> getTestClass() {
-		return this.testClass;
+        return testClassContext.getTestClass();
 	}
 
 	/**
@@ -274,7 +79,6 @@
 	 * Note: this is a mutable property.
 	 * 
 	 * @return the current test instance (may be <code>null</code>)
-	 * @see #updateState(Object,Method,Throwable)
 	 */
 	public final Object getTestInstance() {
 		return this.testInstance;
@@ -286,7 +90,6 @@
 	 * Note: this is a mutable property.
 	 * 
 	 * @return the current test method (may be <code>null</code>)
-	 * @see #updateState(Object, Method, Throwable)
 	 */
 	public final Method getTestMethod() {
 		return this.testMethod;
@@ -300,7 +103,7 @@
 	 * 
 	 * @return the exception that was thrown, or <code>null</code> if no
 	 * exception was thrown
-	 * @see #updateState(Object, Method, Throwable)
+	 * @see #addException(Throwable)
 	 */
 	public final Throwable getTestException() {
 		return this.testException;
@@ -313,23 +116,18 @@
 	 * replacing a bean definition).
 	 */
 	public void markApplicationContextDirty() {
-		this.contextCache.setDirty(contextKeyString(this.locations));
+        testClassContext.markApplicationContextDirty();
 	}
 
-	/**
-	 * Update this test context to reflect the state of the currently executing
-	 * test.
-	 * 
-	 * @param testInstance the current test instance (may be <code>null</code>)
-	 * @param testMethod the current test method (may be <code>null</code>)
-	 * @param testException the exception that was thrown in the test method, or
-	 * <code>null</code> if no exception was thrown
-	 */
-	void updateState(Object testInstance, Method testMethod, Throwable testException) {
-		this.testInstance = testInstance;
-		this.testMethod = testMethod;
-		this.testException = testException;
-	}
+    /**
+     * Adds any exceptions that occured during runtime to this context.
+     *
+     * @param testException the exception that was thrown in the test method, or
+     * <code>null</code> if no exception was thrown
+     */
+    void addException(Throwable testException) {
+        this.testException = testException;
+    }
 
 	/**
 	 * Provide a String representation of this test context's state.
@@ -337,11 +135,10 @@
 	@Override
 	public String toString() {
 		return new ToStringCreator(this)//
-		.append("testClass", this.testClass)//
-		.append("locations", this.locations)//
 		.append("testInstance", this.testInstance)//
 		.append("testMethod", this.testMethod)//
 		.append("testException", this.testException)//
+        .append(testClassContext.toString())
 		.toString();
 	}
 
Index: org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java
===================================================================
--- org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java	(revision 1417)
+++ org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java	(working copy)
@@ -16,20 +16,23 @@
 
 package org.springframework.test.context.support;
 
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
 import org.springframework.beans.factory.support.BeanDefinitionReader;
 import org.springframework.beans.factory.support.DefaultListableBeanFactory;
 import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.AnnotationConfigUtils;
 import org.springframework.context.support.GenericApplicationContext;
 import org.springframework.util.StringUtils;
+import org.springframework.test.context.ContextCacheKey;
 
 /**
  * Abstract, generic extension of {@link AbstractContextLoader} which loads a
  * {@link GenericApplicationContext} from the <em>locations</em> provided to
- * {@link #loadContext(String...)}.
+ * {@link #loadContext(String[])} 
  *
  * <p>Concrete subclasses must provide an appropriate
  * {@link #createBeanDefinitionReader(GenericApplicationContext) BeanDefinitionReader}.
@@ -37,7 +40,7 @@
  * @author Sam Brannen
  * @author Juergen Hoeller
  * @since 2.5
- * @see #loadContext(String...)
+ * @see #loadContext(String[]) 
  */
 public abstract class AbstractGenericContextLoader extends AbstractContextLoader {
 
@@ -56,7 +59,7 @@
 	 * <li>Delegates to {@link AnnotationConfigUtils} for
 	 * {@link AnnotationConfigUtils#registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry) registering}
 	 * annotation configuration processors.</li>
-	 * <li>Calls {@link #customizeContext(GenericApplicationContext)} to allow
+	 * <li>Calls {@link #customizeContext(org.springframework.context.support.GenericApplicationContext, org.springframework.test.context.ContextCacheKey)}  to allow
 	 * for customizing the context before it is refreshed.</li>
 	 * <li>{@link ConfigurableApplicationContext#refresh() Refreshes} the
 	 * context and registers a JVM shutdown hook for it.</li>
@@ -80,13 +83,30 @@
 		customizeBeanFactory(context.getDefaultListableBeanFactory());
 		createBeanDefinitionReader(context).loadBeanDefinitions(locations);
 		AnnotationConfigUtils.registerAnnotationConfigProcessors(context);
-		customizeContext(context);
+		customizeContext(context, new ContextCacheKey( locations));
 		context.refresh();
 		context.registerShutdownHook();
 		return context;
 	}
 
 	/**
+	 * Activates this context for the current thread.
+	 *
+	 * This method is called every time an applicationContext is assigned to a thread,
+	 * including the first time the context is created. The thread may have previously been assigned
+	 *  a different applicationContext.
+	 *
+	 * This method only needs to be implemented if you use web scopes AND run multi-threaded tests.
+	 *
+	 * @param applicationContext The context that is to be activated
+	 * @param contextCacheKey The cache key that the context loader can use to cache additional data
+	 * @since 3.0
+	 */
+
+	public void activateForThread(ApplicationContext applicationContext, ContextCacheKey contextCacheKey) {
+	}
+
+	/**
 	 * Prepare the {@link GenericApplicationContext} created by this ContextLoader.
 	 * Called <i>before</> bean definitions are read.
 	 * <p>The default implementation is empty. Can be overridden in subclasses to
@@ -96,6 +116,7 @@
 	 * @see org.springframework.context.support.GenericApplicationContext#setResourceLoader
 	 * @see org.springframework.context.support.GenericApplicationContext#setId
 	 */
+	@SuppressWarnings({"UnusedDeclaration"})
 	protected void prepareContext(GenericApplicationContext context) {
 	}
 
@@ -111,6 +132,7 @@
 	 * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowCircularReferences(boolean)
 	 * @see org.springframework.beans.factory.support.DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping(boolean)
 	 */
+	@SuppressWarnings({"UnusedDeclaration"})
 	protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {
 	}
 
@@ -132,9 +154,11 @@
 	 * <p>The default implementation is empty but can be overridden in subclasses
 	 * to customize the application context.
 	 * @param context the newly created application context
-	 * @see #loadContext(String...)
+	 * @param contextCacheKey The cache key to be used for caching within this loader
+	 * @see #loadContext(String[]) 
 	 */
-	protected void customizeContext(GenericApplicationContext context) {
+	@SuppressWarnings({"UnusedDeclaration"})
+	protected void customizeContext(GenericApplicationContext context, ContextCacheKey contextCacheKey) {
 	}
 
 }
Index: spring-framework.ipr
===================================================================
--- spring-framework.ipr	(revision 1417)
+++ spring-framework.ipr	(working copy)
@@ -97,17 +97,17 @@
           <option name="LABEL_INDENT_SIZE" value="0" />
           <option name="LABEL_INDENT_ABSOLUTE" value="false" />
         </ADDITIONAL_INDENT_OPTIONS>
-        <ADDITIONAL_INDENT_OPTIONS fileType="java">
-          <option name="INDENT_SIZE" value="4" />
+        <ADDITIONAL_INDENT_OPTIONS fileType="groovy">
+          <option name="INDENT_SIZE" value="2" />
           <option name="CONTINUATION_INDENT_SIZE" value="8" />
           <option name="TAB_SIZE" value="4" />
-          <option name="USE_TAB_CHARACTER" value="true" />
+          <option name="USE_TAB_CHARACTER" value="false" />
           <option name="SMART_TABS" value="false" />
           <option name="LABEL_INDENT_SIZE" value="0" />
           <option name="LABEL_INDENT_ABSOLUTE" value="false" />
         </ADDITIONAL_INDENT_OPTIONS>
-        <ADDITIONAL_INDENT_OPTIONS fileType="js">
-          <option name="INDENT_SIZE" value="4" />
+        <ADDITIONAL_INDENT_OPTIONS fileType="gsp">
+          <option name="INDENT_SIZE" value="2" />
           <option name="CONTINUATION_INDENT_SIZE" value="8" />
           <option name="TAB_SIZE" value="4" />
           <option name="USE_TAB_CHARACTER" value="false" />
@@ -115,17 +115,26 @@
           <option name="LABEL_INDENT_SIZE" value="0" />
           <option name="LABEL_INDENT_ABSOLUTE" value="false" />
         </ADDITIONAL_INDENT_OPTIONS>
-        <ADDITIONAL_INDENT_OPTIONS fileType="jsp">
+        <ADDITIONAL_INDENT_OPTIONS fileType="java">
           <option name="INDENT_SIZE" value="4" />
           <option name="CONTINUATION_INDENT_SIZE" value="8" />
           <option name="TAB_SIZE" value="4" />
+          <option name="USE_TAB_CHARACTER" value="true" />
+          <option name="SMART_TABS" value="false" />
+          <option name="LABEL_INDENT_SIZE" value="0" />
+          <option name="LABEL_INDENT_ABSOLUTE" value="false" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <ADDITIONAL_INDENT_OPTIONS fileType="js">
+          <option name="INDENT_SIZE" value="4" />
+          <option name="CONTINUATION_INDENT_SIZE" value="8" />
+          <option name="TAB_SIZE" value="4" />
           <option name="USE_TAB_CHARACTER" value="false" />
           <option name="SMART_TABS" value="false" />
           <option name="LABEL_INDENT_SIZE" value="0" />
           <option name="LABEL_INDENT_ABSOLUTE" value="false" />
         </ADDITIONAL_INDENT_OPTIONS>
-        <ADDITIONAL_INDENT_OPTIONS fileType="sql">
-          <option name="INDENT_SIZE" value="2" />
+        <ADDITIONAL_INDENT_OPTIONS fileType="jsp">
+          <option name="INDENT_SIZE" value="4" />
           <option name="CONTINUATION_INDENT_SIZE" value="8" />
           <option name="TAB_SIZE" value="4" />
           <option name="USE_TAB_CHARACTER" value="false" />
@@ -732,7 +741,7 @@
   </component>
   <component name="ProjectFileVersion" converted="true" />
   <component name="ProjectKey">
-    <option name="state" value="https://src.springframework.org/svn/spring-framework/trunk/spring-framework.ipr" />
+    <option name="state" value="https://src.springsource.org/svn/spring-framework/trunk/spring-framework.ipr" />
   </component>
   <component name="ProjectModuleManager">
     <modules>
@@ -955,7 +964,7 @@
     </library>
   </component>
   <UsedPathMacros>
-    <macro name="IVY_CACHE" />
+    <macro name="IVY_CACHE" description="" />
   </UsedPathMacros>
 </project>
 
Index: org.springframework.integration-tests/integration-tests.iml
===================================================================
--- org.springframework.integration-tests/integration-tests.iml	(revision 1417)
+++ org.springframework.integration-tests/integration-tests.iml	(working copy)
@@ -1,567 +1,567 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module relativePaths="true" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/target" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="aop" />
-    <orderEntry type="module" module-name="beans" />
-    <orderEntry type="module" module-name="context" />
-    <orderEntry type="module" module-name="context-support" />
-    <orderEntry type="module" module-name="core" />
-    <orderEntry type="module" module-name="jdbc" />
-    <orderEntry type="module" module-name="jms" />
-    <orderEntry type="module" module-name="orm" />
-    <orderEntry type="module" module-name="test" />
-    <orderEntry type="module" module-name="transaction" />
-    <orderEntry type="module" module-name="web" />
-    <orderEntry type="module" module-name="web-portlet" />
-    <orderEntry type="module" module-name="web-servlet" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-sources-1.1.1.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-1.0.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-sources-1.0.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.jms/com.springsource.javax.jms/1.1.0/com.springsource.javax.jms-1.1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.jms/com.springsource.javax.jms/1.1.0/com.springsource.javax.jms-sources-1.1.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp/2.1.0/com.springsource.javax.servlet.jsp-2.1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp/2.1.0/com.springsource.javax.servlet.jsp-sources-2.1.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-2.0.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-sources-2.0.5.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.lowagie.text/com.springsource.com.lowagie.text/2.0.8/com.springsource.com.lowagie.text-2.0.8.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/com.lowagie.text/com.springsource.com.lowagie.text/2.0.8/com.springsource.com.lowagie.text-sources-2.0.8.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.codehaus.groovy/com.springsource.org.codehaus.groovy/1.5.1/com.springsource.org.codehaus.groovy-1.5.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.codehaus.groovy/com.springsource.org.codehaus.groovy/1.5.1/com.springsource.org.codehaus.groovy-sources-1.5.1.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.transaction/com.springsource.javax.transaction/1.1.0/com.springsource.javax.transaction-1.1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.transaction/com.springsource.javax.transaction/1.1.0/com.springsource.javax.transaction-sources-1.1.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.ibm.websphere/com.springsource.com.ibm.websphere.uow/6.0.2.17/com.springsource.com.ibm.websphere.uow-6.0.2.17.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.faces/com.springsource.javax.faces/1.2.0.08/com.springsource.javax.faces-1.2.0.08.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.faces/com.springsource.javax.faces/1.2.0.08/com.springsource.javax.faces-sources-1.2.0.08.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-1.6.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-sources-1.6.1.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.resource/com.springsource.javax.resource/1.5.0/com.springsource.javax.resource-1.5.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.resource/com.springsource.javax.resource/1.5.0/com.springsource.javax.resource-sources-1.5.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.fileupload/1.2.0/com.springsource.org.apache.commons.fileupload-1.2.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.fileupload/1.2.0/com.springsource.org.apache.commons.fileupload-sources-1.2.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.mail/com.springsource.javax.mail/1.4.0/com.springsource.javax.mail-1.4.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.mail/com.springsource.javax.mail/1.4.0/com.springsource.javax.mail-sources-1.4.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.aspectj/com.springsource.org.aspectj.weaver/1.6.2.RELEASE/com.springsource.org.aspectj.weaver-1.6.2.RELEASE.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.aspectj/com.springsource.org.aspectj.weaver/1.6.2.RELEASE/com.springsource.org.aspectj.weaver-sources-1.6.2.RELEASE.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-1.2.15.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-sources-1.2.15.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.opensymphony.quartz/com.springsource.org.quartz/1.6.2/com.springsource.org.quartz-1.6.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/com.opensymphony.quartz/com.springsource.org.quartz/1.6.2/com.springsource.org.quartz-sources-1.6.2.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-2.3.15.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-sources-2.3.15.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.xml.rpc/com.springsource.javax.xml.rpc/1.1.0/com.springsource.javax.xml.rpc-1.1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-1.5.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-sources-1.5.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.hibernate/com.springsource.org.hibernate/3.3.1.GA/com.springsource.org.hibernate-3.3.1.GA.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.hibernate/com.springsource.org.hibernate/3.3.1.GA/com.springsource.org.hibernate-sources-3.3.1.GA.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.el/com.springsource.javax.el/2.1.0/com.springsource.javax.el-2.1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.el/com.springsource.javax.el/2.1.0/com.springsource.javax.el-sources-2.1.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity.tools.view/1.4.0/com.springsource.org.apache.velocity.tools.view-1.4.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity.tools.view/1.4.0/com.springsource.org.apache.velocity.tools.view-sources-1.4.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.pool/1.4.0/com.springsource.org.apache.commons.pool-1.4.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.pool/1.4.0/com.springsource.org.apache.commons.pool-sources-1.4.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-3.0.2.FINAL.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-sources-3.0.2.FINAL.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-1.1.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-sources-1.1.2.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/edu.emory.mathcs.backport/com.springsource.edu.emory.mathcs.backport/3.0.0/com.springsource.edu.emory.mathcs.backport-3.0.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/edu.emory.mathcs.backport/com.springsource.edu.emory.mathcs.backport/3.0.0/com.springsource.edu.emory.mathcs.backport-sources-3.0.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-sources-1.1.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.cglib/com.springsource.net.sf.cglib/2.1.3/com.springsource.net.sf.cglib-2.1.3.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.cglib/com.springsource.net.sf.cglib/2.1.3/com.springsource.net.sf.cglib-sources-2.1.3.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/1.3.0/com.springsource.net.sf.ehcache-1.3.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/1.3.0/com.springsource.net.sf.ehcache-sources-1.3.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jexcelapi/com.springsource.jxl/2.6.6/com.springsource.jxl-2.6.6.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jexcelapi/com.springsource.jxl/2.6.6/com.springsource.jxl-sources-2.6.6.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.sun.syndication/com.springsource.com.sun.syndication/0.9.0/com.springsource.com.sun.syndication-0.9.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/com.sun.syndication/com.springsource.com.sun.syndication/0.9.0/com.springsource.com.sun.syndication-sources-0.9.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.custommonkey.xmlunit/com.springsource.org.custommonkey.xmlunit/1.2.0/com.springsource.org.custommonkey.xmlunit-1.2.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.custommonkey.xmlunit/com.springsource.org.custommonkey.xmlunit/1.2.0/com.springsource.org.custommonkey.xmlunit-sources-1.2.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.jdom/com.springsource.org.jdom/1.0.0/com.springsource.org.jdom-1.0.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.jdom/com.springsource.org.jdom/1.0.0/com.springsource.org.jdom-sources-1.0.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.ibatis/com.springsource.com.ibatis/2.3.4.726/com.springsource.com.ibatis-2.3.4.726.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.ibatis/com.springsource.com.ibatis/2.3.4.726/com.springsource.com.ibatis-sources-2.3.4.726.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.hibernate/com.springsource.org.hibernate.ejb/3.3.1.ga/com.springsource.org.hibernate.ejb-3.3.1.ga.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.hibernate/com.springsource.org.hibernate.ejb/3.3.1.ga/com.springsource.org.hibernate.ejb-sources-3.3.1.ga.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.sun.enterprise/com.springsource.com.sun.enterprise.loader/1.0.0/com.springsource.com.sun.enterprise.loader-1.0.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.testng/com.springsource.org.testng/5.8.0/com.springsource.org.testng-5.8.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.testng/com.springsource.org.testng/5.8.0/com.springsource.org.testng-sources-5.8.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.caucho/com.springsource.com.caucho/3.1.5/com.springsource.com.caucho-3.1.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/com.caucho/com.springsource.com.caucho/3.1.5/com.springsource.com.caucho-sources-3.1.5.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.eclipse.persistence/com.springsource.org.eclipse.persistence.jpa/1.0.1/com.springsource.org.eclipse.persistence.jpa-1.0.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.eclipse.persistence/com.springsource.org.eclipse.persistence.jpa/1.0.1/com.springsource.org.eclipse.persistence.jpa-sources-1.0.1.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.eclipse.persistence/com.springsource.org.eclipse.persistence/1.0.1/com.springsource.org.eclipse.persistence-1.0.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.eclipse.persistence/com.springsource.org.eclipse.persistence/1.0.1/com.springsource.org.eclipse.persistence-sources-1.0.1.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-3.2.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-sources-3.2.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.openjpa/com.springsource.org.apache.openjpa.persistence/1.0.2/com.springsource.org.apache.openjpa.persistence-1.0.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.openjpa/com.springsource.org.apache.openjpa.persistence/1.0.2/com.springsource.org.apache.openjpa.persistence-sources-1.0.2.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.oracle.toplink.essentials/com.springsource.oracle.toplink.essentials/2.0.0.b41-beta2/com.springsource.oracle.toplink.essentials-2.0.0.b41-beta2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/com.oracle.toplink.essentials/com.springsource.oracle.toplink.essentials/2.0.0.b41-beta2/com.springsource.oracle.toplink.essentials-sources-2.0.0.b41-beta2.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-sources-2.7.6.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-4.5.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-sources-4.5.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet/2.5.0/com.springsource.javax.servlet-2.5.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.portlet/com.springsource.javax.portlet/2.0.0/com.springsource.javax.portlet-2.0.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-2.1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-  </component>
-  <component name="copyright">
-    <Base>
-      <setting name="state" value="2" />
-    </Base>
-  </component>
-</module>
-
+<?xml version="1.0" encoding="UTF-8"?>
+<module relativePaths="true" type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module" module-name="aop" />
+    <orderEntry type="module" module-name="beans" />
+    <orderEntry type="module" module-name="context" />
+    <orderEntry type="module" module-name="context-support" />
+    <orderEntry type="module" module-name="core" />
+    <orderEntry type="module" module-name="jdbc" />
+    <orderEntry type="module" module-name="jms" />
+    <orderEntry type="module" module-name="orm" />
+    <orderEntry type="module" module-name="test" />
+    <orderEntry type="module" module-name="transaction" />
+    <orderEntry type="module" module-name="web" />
+    <orderEntry type="module" module-name="web-portlet" />
+    <orderEntry type="module" module-name="web-servlet" />
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-sources-1.1.1.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-1.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-sources-1.0.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.jms/com.springsource.javax.jms/1.1.0/com.springsource.javax.jms-1.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.jms/com.springsource.javax.jms/1.1.0/com.springsource.javax.jms-sources-1.1.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp/2.1.0/com.springsource.javax.servlet.jsp-2.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp/2.1.0/com.springsource.javax.servlet.jsp-sources-2.1.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-2.0.5.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-sources-2.0.5.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.lowagie.text/com.springsource.com.lowagie.text/2.0.8/com.springsource.com.lowagie.text-2.0.8.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/com.lowagie.text/com.springsource.com.lowagie.text/2.0.8/com.springsource.com.lowagie.text-sources-2.0.8.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.codehaus.groovy/com.springsource.org.codehaus.groovy/1.5.1/com.springsource.org.codehaus.groovy-1.5.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.codehaus.groovy/com.springsource.org.codehaus.groovy/1.5.1/com.springsource.org.codehaus.groovy-sources-1.5.1.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.transaction/com.springsource.javax.transaction/1.1.0/com.springsource.javax.transaction-1.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.transaction/com.springsource.javax.transaction/1.1.0/com.springsource.javax.transaction-sources-1.1.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.ibm.websphere/com.springsource.com.ibm.websphere.uow/6.0.2.17/com.springsource.com.ibm.websphere.uow-6.0.2.17.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.faces/com.springsource.javax.faces/1.2.0.08/com.springsource.javax.faces-1.2.0.08.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.faces/com.springsource.javax.faces/1.2.0.08/com.springsource.javax.faces-sources-1.2.0.08.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-1.6.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-sources-1.6.1.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.resource/com.springsource.javax.resource/1.5.0/com.springsource.javax.resource-1.5.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.resource/com.springsource.javax.resource/1.5.0/com.springsource.javax.resource-sources-1.5.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.fileupload/1.2.0/com.springsource.org.apache.commons.fileupload-1.2.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.fileupload/1.2.0/com.springsource.org.apache.commons.fileupload-sources-1.2.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.mail/com.springsource.javax.mail/1.4.0/com.springsource.javax.mail-1.4.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.mail/com.springsource.javax.mail/1.4.0/com.springsource.javax.mail-sources-1.4.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.aspectj/com.springsource.org.aspectj.weaver/1.6.2.RELEASE/com.springsource.org.aspectj.weaver-1.6.2.RELEASE.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.aspectj/com.springsource.org.aspectj.weaver/1.6.2.RELEASE/com.springsource.org.aspectj.weaver-sources-1.6.2.RELEASE.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-1.2.15.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-sources-1.2.15.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.opensymphony.quartz/com.springsource.org.quartz/1.6.2/com.springsource.org.quartz-1.6.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/com.opensymphony.quartz/com.springsource.org.quartz/1.6.2/com.springsource.org.quartz-sources-1.6.2.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-2.3.15.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-sources-2.3.15.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.xml.rpc/com.springsource.javax.xml.rpc/1.1.0/com.springsource.javax.xml.rpc-1.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-1.5.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-sources-1.5.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.hibernate/com.springsource.org.hibernate/3.3.1.GA/com.springsource.org.hibernate-3.3.1.GA.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.hibernate/com.springsource.org.hibernate/3.3.1.GA/com.springsource.org.hibernate-sources-3.3.1.GA.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.el/com.springsource.javax.el/2.1.0/com.springsource.javax.el-2.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.el/com.springsource.javax.el/2.1.0/com.springsource.javax.el-sources-2.1.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity.tools.view/1.4.0/com.springsource.org.apache.velocity.tools.view-1.4.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity.tools.view/1.4.0/com.springsource.org.apache.velocity.tools.view-sources-1.4.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.pool/1.4.0/com.springsource.org.apache.commons.pool-1.4.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.pool/1.4.0/com.springsource.org.apache.commons.pool-sources-1.4.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-3.0.2.FINAL.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-sources-3.0.2.FINAL.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-1.1.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-sources-1.1.2.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/edu.emory.mathcs.backport/com.springsource.edu.emory.mathcs.backport/3.0.0/com.springsource.edu.emory.mathcs.backport-3.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/edu.emory.mathcs.backport/com.springsource.edu.emory.mathcs.backport/3.0.0/com.springsource.edu.emory.mathcs.backport-sources-3.0.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-sources-1.1.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.cglib/com.springsource.net.sf.cglib/2.1.3/com.springsource.net.sf.cglib-2.1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.cglib/com.springsource.net.sf.cglib/2.1.3/com.springsource.net.sf.cglib-sources-2.1.3.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/1.3.0/com.springsource.net.sf.ehcache-1.3.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/1.3.0/com.springsource.net.sf.ehcache-sources-1.3.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jexcelapi/com.springsource.jxl/2.6.6/com.springsource.jxl-2.6.6.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jexcelapi/com.springsource.jxl/2.6.6/com.springsource.jxl-sources-2.6.6.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.sun.syndication/com.springsource.com.sun.syndication/0.9.0/com.springsource.com.sun.syndication-0.9.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/com.sun.syndication/com.springsource.com.sun.syndication/0.9.0/com.springsource.com.sun.syndication-sources-0.9.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.custommonkey.xmlunit/com.springsource.org.custommonkey.xmlunit/1.2.0/com.springsource.org.custommonkey.xmlunit-1.2.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.custommonkey.xmlunit/com.springsource.org.custommonkey.xmlunit/1.2.0/com.springsource.org.custommonkey.xmlunit-sources-1.2.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.jdom/com.springsource.org.jdom/1.0.0/com.springsource.org.jdom-1.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.jdom/com.springsource.org.jdom/1.0.0/com.springsource.org.jdom-sources-1.0.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.ibatis/com.springsource.com.ibatis/2.3.4.726/com.springsource.com.ibatis-2.3.4.726.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.ibatis/com.springsource.com.ibatis/2.3.4.726/com.springsource.com.ibatis-sources-2.3.4.726.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.hibernate/com.springsource.org.hibernate.ejb/3.3.1.ga/com.springsource.org.hibernate.ejb-3.3.1.ga.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.hibernate/com.springsource.org.hibernate.ejb/3.3.1.ga/com.springsource.org.hibernate.ejb-sources-3.3.1.ga.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.sun.enterprise/com.springsource.com.sun.enterprise.loader/1.0.0/com.springsource.com.sun.enterprise.loader-1.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.testng/com.springsource.org.testng/5.8.0/com.springsource.org.testng-5.8.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.testng/com.springsource.org.testng/5.8.0/com.springsource.org.testng-sources-5.8.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.caucho/com.springsource.com.caucho/3.1.5/com.springsource.com.caucho-3.1.5.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/com.caucho/com.springsource.com.caucho/3.1.5/com.springsource.com.caucho-sources-3.1.5.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.eclipse.persistence/com.springsource.org.eclipse.persistence.jpa/1.0.1/com.springsource.org.eclipse.persistence.jpa-1.0.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.eclipse.persistence/com.springsource.org.eclipse.persistence.jpa/1.0.1/com.springsource.org.eclipse.persistence.jpa-sources-1.0.1.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.eclipse.persistence/com.springsource.org.eclipse.persistence/1.0.1/com.springsource.org.eclipse.persistence-1.0.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.eclipse.persistence/com.springsource.org.eclipse.persistence/1.0.1/com.springsource.org.eclipse.persistence-sources-1.0.1.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-3.2.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-sources-3.2.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.openjpa/com.springsource.org.apache.openjpa.persistence/1.0.2/com.springsource.org.apache.openjpa.persistence-1.0.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.openjpa/com.springsource.org.apache.openjpa.persistence/1.0.2/com.springsource.org.apache.openjpa.persistence-sources-1.0.2.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.oracle.toplink.essentials/com.springsource.oracle.toplink.essentials/2.0.0.b41-beta2/com.springsource.oracle.toplink.essentials-2.0.0.b41-beta2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/com.oracle.toplink.essentials/com.springsource.oracle.toplink.essentials/2.0.0.b41-beta2/com.springsource.oracle.toplink.essentials-sources-2.0.0.b41-beta2.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-sources-2.7.6.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-4.5.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-sources-4.5.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet/2.5.0/com.springsource.javax.servlet-2.5.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.portlet/com.springsource.javax.portlet/2.0.0/com.springsource.javax.portlet-2.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-2.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+  </component>
+  <component name="copyright">
+    <Base>
+      <setting name="state" value="2" />
+    </Base>
+  </component>
+</module>
+
Index: org.springframework.context.support/context-support.iml
===================================================================
--- org.springframework.context.support/context-support.iml	(revision 1417)
+++ org.springframework.context.support/context-support.iml	(working copy)
@@ -1,169 +1,169 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module relativePaths="true" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/target" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="module" module-name="beans" />
-    <orderEntry type="module" module-name="context" />
-    <orderEntry type="module" module-name="core" />
-    <orderEntry type="module" module-name="jdbc" />
-    <orderEntry type="module" module-name="transaction" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-sources-1.1.1.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-1.5.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-sources-1.5.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-2.3.15.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-sources-2.3.15.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-2.0.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-sources-2.0.5.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.opensymphony.quartz/com.springsource.org.quartz/1.6.2/com.springsource.org.quartz-1.6.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/com.opensymphony.quartz/com.springsource.org.quartz/1.6.2/com.springsource.org.quartz-sources-1.6.2.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.bea.commonj/com.springsource.commonj/1.1.0/com.springsource.commonj-1.1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/com.bea.commonj/com.springsource.commonj/1.1.0/com.springsource.commonj-sources-1.1.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-1.2.15.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-sources-1.2.15.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-4.5.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-sources-4.5.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-3.2.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-sources-3.2.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.mail/com.springsource.javax.mail/1.4.0/com.springsource.javax.mail-1.4.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.mail/com.springsource.javax.mail/1.4.0/com.springsource.javax.mail-sources-1.4.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/1.3.0/com.springsource.net.sf.ehcache-1.3.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/1.3.0/com.springsource.net.sf.ehcache-sources-1.3.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-3.0.2.FINAL.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-sources-3.0.2.FINAL.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-  </component>
-  <component name="copyright">
-    <Base>
-      <setting name="state" value="2" />
-    </Base>
-  </component>
-</module>
-
+<?xml version="1.0" encoding="UTF-8"?>
+<module relativePaths="true" type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="module" module-name="beans" />
+    <orderEntry type="module" module-name="context" />
+    <orderEntry type="module" module-name="core" />
+    <orderEntry type="module" module-name="jdbc" />
+    <orderEntry type="module" module-name="transaction" />
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-sources-1.1.1.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-1.5.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-sources-1.5.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-2.3.15.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-sources-2.3.15.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-2.0.5.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-sources-2.0.5.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.opensymphony.quartz/com.springsource.org.quartz/1.6.2/com.springsource.org.quartz-1.6.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/com.opensymphony.quartz/com.springsource.org.quartz/1.6.2/com.springsource.org.quartz-sources-1.6.2.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.bea.commonj/com.springsource.commonj/1.1.0/com.springsource.commonj-1.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/com.bea.commonj/com.springsource.commonj/1.1.0/com.springsource.commonj-sources-1.1.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-1.2.15.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-sources-1.2.15.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-4.5.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-sources-4.5.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-3.2.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-sources-3.2.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.mail/com.springsource.javax.mail/1.4.0/com.springsource.javax.mail-1.4.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.mail/com.springsource.javax.mail/1.4.0/com.springsource.javax.mail-sources-1.4.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/1.3.0/com.springsource.net.sf.ehcache-1.3.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.ehcache/com.springsource.net.sf.ehcache/1.3.0/com.springsource.net.sf.ehcache-sources-1.3.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-3.0.2.FINAL.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-sources-3.0.2.FINAL.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+  </component>
+  <component name="copyright">
+    <Base>
+      <setting name="state" value="2" />
+    </Base>
+  </component>
+</module>
+
Index: org.springframework.web.servlet/web-servlet.iml
===================================================================
--- org.springframework.web.servlet/web-servlet.iml	(revision 1417)
+++ org.springframework.web.servlet/web-servlet.iml	(working copy)
@@ -1,323 +1,323 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module relativePaths="true" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/target" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="module" module-name="aop" />
-    <orderEntry type="module" module-name="beans" />
-    <orderEntry type="module" module-name="context" />
-    <orderEntry type="module" module-name="context-support" />
-    <orderEntry type="module" module-name="core" />
-    <orderEntry type="module" module-name="oxm" />
-    <orderEntry type="module" module-name="web" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-sources-1.1.1.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-1.1.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-sources-1.1.2.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-2.3.15.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-sources-2.3.15.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-1.5.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-sources-1.5.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity.tools.view/1.4.0/com.springsource.org.apache.velocity.tools.view-1.4.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity.tools.view/1.4.0/com.springsource.org.apache.velocity.tools.view-sources-1.4.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-2.0.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-sources-2.0.5.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jexcelapi/com.springsource.jxl/2.6.6/com.springsource.jxl-2.6.6.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/net.sourceforge.jexcelapi/com.springsource.jxl/2.6.6/com.springsource.jxl-sources-2.6.6.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-3.0.2.FINAL.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-sources-3.0.2.FINAL.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.fileupload/1.2.0/com.springsource.org.apache.commons.fileupload-1.2.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.fileupload/1.2.0/com.springsource.org.apache.commons.fileupload-sources-1.2.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-4.5.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-sources-4.5.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles/2.0.5/com.springsource.org.apache.tiles-2.0.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles/2.0.5/com.springsource.org.apache.tiles-sources-2.0.5.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles.core/2.0.5.osgi/com.springsource.org.apache.tiles.core-2.0.5.osgi.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles.core/2.0.5.osgi/com.springsource.org.apache.tiles.core-sources-2.0.5.osgi.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles.jsp/2.0.5/com.springsource.org.apache.tiles.jsp-2.0.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles.jsp/2.0.5/com.springsource.org.apache.tiles.jsp-sources-2.0.5.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.lowagie.text/com.springsource.com.lowagie.text/2.0.8/com.springsource.com.lowagie.text-2.0.8.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/com.lowagie.text/com.springsource.com.lowagie.text/2.0.8/com.springsource.com.lowagie.text-sources-2.0.8.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet/2.5.0/com.springsource.javax.servlet-2.5.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet/2.5.0/com.springsource.javax.servlet-sources-2.5.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-1.0.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.custommonkey.xmlunit/com.springsource.org.custommonkey.xmlunit/1.2.0/com.springsource.org.custommonkey.xmlunit-1.2.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.custommonkey.xmlunit/com.springsource.org.custommonkey.xmlunit/1.2.0/com.springsource.org.custommonkey.xmlunit-sources-1.2.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-1.6.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-sources-1.6.1.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.taglibs/com.springsource.org.apache.taglibs.standard/1.1.2/com.springsource.org.apache.taglibs.standard-1.1.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.taglibs/com.springsource.org.apache.taglibs.standard/1.1.2/com.springsource.org.apache.taglibs.standard-sources-1.1.2.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp/2.1.0/com.springsource.javax.servlet.jsp-2.1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp/2.1.0/com.springsource.javax.servlet.jsp-sources-2.1.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/javax.el/com.springsource.javax.el/1.0.0/com.springsource.javax.el-1.0.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/javax.el/com.springsource.javax.el/1.0.0/com.springsource.javax.el-sources-1.0.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.beanutils/1.7.0/com.springsource.org.apache.commons.beanutils-1.7.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.beanutils/1.7.0/com.springsource.org.apache.commons.beanutils-sources-1.7.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.digester/1.8.0/com.springsource.org.apache.commons.digester-1.8.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.digester/1.8.0/com.springsource.org.apache.commons.digester-sources-1.8.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.eclipse.jdt/com.springsource.org.eclipse.jdt.core.compiler.batch/3.3.0/com.springsource.org.eclipse.jdt.core.compiler.batch-3.3.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.eclipse.jdt/com.springsource.org.eclipse.jdt.core.compiler.batch/3.3.0/com.springsource.org.eclipse.jdt.core.compiler.batch-sources-3.3.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/com.sun.syndication/com.springsource.com.sun.syndication/1.0.0/com.springsource.com.sun.syndication-1.0.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/com.sun.syndication/com.springsource.com.sun.syndication/1.0.0/com.springsource.com.sun.syndication-sources-1.0.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.lang/2.1.0/com.springsource.org.apache.commons.lang-2.1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.lang/2.1.0/com.springsource.org.apache.commons.lang-sources-2.1.0.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-  </component>
-  <component name="copyright">
-    <Base>
-      <setting name="state" value="1" />
-    </Base>
-  </component>
-</module>
-
+<?xml version="1.0" encoding="UTF-8"?>
+<module relativePaths="true" type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="module" module-name="aop" />
+    <orderEntry type="module" module-name="beans" />
+    <orderEntry type="module" module-name="context" />
+    <orderEntry type="module" module-name="context-support" />
+    <orderEntry type="module" module-name="core" />
+    <orderEntry type="module" module-name="oxm" />
+    <orderEntry type="module" module-name="web" />
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-sources-1.1.1.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-1.1.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp.jstl/1.1.2/com.springsource.javax.servlet.jsp.jstl-sources-1.1.2.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-2.3.15.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.freemarker/com.springsource.freemarker/2.3.15/com.springsource.freemarker-sources-2.3.15.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-1.5.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity/1.5.0/com.springsource.org.apache.velocity-sources-1.5.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity.tools.view/1.4.0/com.springsource.org.apache.velocity.tools.view-1.4.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.velocity/com.springsource.org.apache.velocity.tools.view/1.4.0/com.springsource.org.apache.velocity.tools.view-sources-1.4.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-2.0.5.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jasperreports/com.springsource.net.sf.jasperreports/2.0.5/com.springsource.net.sf.jasperreports-sources-2.0.5.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jexcelapi/com.springsource.jxl/2.6.6/com.springsource.jxl-2.6.6.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/net.sourceforge.jexcelapi/com.springsource.jxl/2.6.6/com.springsource.jxl-sources-2.6.6.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-3.0.2.FINAL.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.poi/com.springsource.org.apache.poi/3.0.2.FINAL/com.springsource.org.apache.poi-sources-3.0.2.FINAL.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.fileupload/1.2.0/com.springsource.org.apache.commons.fileupload-1.2.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.fileupload/1.2.0/com.springsource.org.apache.commons.fileupload-sources-1.2.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-4.5.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.junit/com.springsource.org.junit/4.5.0/com.springsource.org.junit-sources-4.5.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles/2.0.5/com.springsource.org.apache.tiles-2.0.5.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles/2.0.5/com.springsource.org.apache.tiles-sources-2.0.5.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles.core/2.0.5.osgi/com.springsource.org.apache.tiles.core-2.0.5.osgi.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles.core/2.0.5.osgi/com.springsource.org.apache.tiles.core-sources-2.0.5.osgi.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles.jsp/2.0.5/com.springsource.org.apache.tiles.jsp-2.0.5.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.tiles/com.springsource.org.apache.tiles.jsp/2.0.5/com.springsource.org.apache.tiles.jsp-sources-2.0.5.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.lowagie.text/com.springsource.com.lowagie.text/2.0.8/com.springsource.com.lowagie.text-2.0.8.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/com.lowagie.text/com.springsource.com.lowagie.text/2.0.8/com.springsource.com.lowagie.text-sources-2.0.8.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet/2.5.0/com.springsource.javax.servlet-2.5.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet/2.5.0/com.springsource.javax.servlet-sources-2.5.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-1.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.custommonkey.xmlunit/com.springsource.org.custommonkey.xmlunit/1.2.0/com.springsource.org.custommonkey.xmlunit-1.2.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.custommonkey.xmlunit/com.springsource.org.custommonkey.xmlunit/1.2.0/com.springsource.org.custommonkey.xmlunit-sources-1.2.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-1.6.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-sources-1.6.1.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.taglibs/com.springsource.org.apache.taglibs.standard/1.1.2/com.springsource.org.apache.taglibs.standard-1.1.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.taglibs/com.springsource.org.apache.taglibs.standard/1.1.2/com.springsource.org.apache.taglibs.standard-sources-1.1.2.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp/2.1.0/com.springsource.javax.servlet.jsp-2.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.servlet/com.springsource.javax.servlet.jsp/2.1.0/com.springsource.javax.servlet.jsp-sources-2.1.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/javax.el/com.springsource.javax.el/1.0.0/com.springsource.javax.el-1.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/javax.el/com.springsource.javax.el/1.0.0/com.springsource.javax.el-sources-1.0.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.beanutils/1.7.0/com.springsource.org.apache.commons.beanutils-1.7.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.beanutils/1.7.0/com.springsource.org.apache.commons.beanutils-sources-1.7.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.digester/1.8.0/com.springsource.org.apache.commons.digester-1.8.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.digester/1.8.0/com.springsource.org.apache.commons.digester-sources-1.8.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.eclipse.jdt/com.springsource.org.eclipse.jdt.core.compiler.batch/3.3.0/com.springsource.org.eclipse.jdt.core.compiler.batch-3.3.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.eclipse.jdt/com.springsource.org.eclipse.jdt.core.compiler.batch/3.3.0/com.springsource.org.eclipse.jdt.core.compiler.batch-sources-3.3.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/com.sun.syndication/com.springsource.com.sun.syndication/1.0.0/com.springsource.com.sun.syndication-1.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/com.sun.syndication/com.springsource.com.sun.syndication/1.0.0/com.springsource.com.sun.syndication-sources-1.0.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.lang/2.1.0/com.springsource.org.apache.commons.lang-2.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$IVY_CACHE$/org.apache.commons/com.springsource.org.apache.commons.lang/2.1.0/com.springsource.org.apache.commons.lang-sources-2.1.0.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+  </component>
+  <component name="copyright">
+    <Base>
+      <setting name="state" value="1" />
+    </Base>
+  </component>
+</module>
+
Index: org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletRequestAttributes.java
===================================================================
--- org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletRequestAttributes.java	(revision 1417)
+++ org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletRequestAttributes.java	(working copy)
@@ -18,6 +18,7 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.portlet.PortletRequest;
 import javax.portlet.PortletSession;
 
@@ -236,8 +237,8 @@
 		return getSession(true).getId();
 	}
 
-	public Object getSessionMutex() {
-		return PortletUtils.getSessionMutex(getSession(true));
+	public ReentrantReadWriteLock getSessionMutex() {
+		return PortletUtils.getSessionReentrantReadWriteLock(getSession(true));
 	}
 
 
Index: org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/util/PortletUtils.java
===================================================================
--- org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/util/PortletUtils.java	(revision 1417)
+++ org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/util/PortletUtils.java	(working copy)
@@ -22,6 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.TreeMap;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.portlet.ActionRequest;
 import javax.portlet.ActionResponse;
 import javax.portlet.PortletContext;
@@ -271,6 +272,38 @@
 
 
 	/**
+	 * Return a ReentrantReadWriteLock for the given session:
+	 * that is, an object to synchronize on for the given session.
+	 * <p>Returns the session mutex attribute if available; usually,
+	 * this means that the HttpSessionMutexListener needs to be defined
+	 * in <code>web.xml</code>. Returns null if no ReentrantReadWriteLock can be found.
+	 *
+	 * <p>The ReentrantReadWriteLock is guaranteed to be the same object during
+	 * the entire lifetime of the session, available under the key defined
+	 * by the <code>SESSION_MUTEX_ATTRIBUTE</code> constant. It serves as a
+	 * safe reference to synchronize on for locking on the current session.
+	 * <p>In many cases, the HttpSession reference itself is a safe mutex
+	 * as well, since it will always be the same object reference for the
+	 * same active logical session. However, this is not guaranteed across
+	 * different servlet containers; the only 100% safe way is (this) session mutex.
+	 * @param session the HttpSession to find a mutex for
+	 * @return the ReentrantReadWriteLock object, never null
+	 * @see #SESSION_MUTEX_ATTRIBUTE
+	 * @see org.springframework.web.util.HttpSessionMutexListener
+	 */
+	public static ReentrantReadWriteLock getSessionReentrantReadWriteLock(PortletSession session) {
+		Assert.notNull(session, "Session must not be null");
+		synchronized (session) {
+			ReentrantReadWriteLock mutex = (ReentrantReadWriteLock) session.getAttribute(WebUtils.SESSION_MUTEX_ATTRIBUTE);
+			if (mutex == null) {
+				mutex = new ReentrantReadWriteLock();
+				session.setAttribute(WebUtils.SESSION_MUTEX_ATTRIBUTE, mutex);
+			}
+			return mutex;
+		}
+	}
+
+	/**
 	 * Expose the given Map as request attributes, using the keys as attribute names
 	 * and the values as corresponding attribute values. Keys must be Strings.
 	 * @param request current portlet request
Index: org.springframework.web/src/main/java/org/springframework/web/jsf/FacesContextUtils.java
===================================================================
--- org.springframework.web/src/main/java/org/springframework/web/jsf/FacesContextUtils.java	(revision 1417)
+++ org.springframework.web/src/main/java/org/springframework/web/jsf/FacesContextUtils.java	(working copy)
@@ -16,6 +16,8 @@
 
 package org.springframework.web.jsf;
 
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.Map;
 import javax.faces.context.ExternalContext;
 import javax.faces.context.FacesContext;
 
@@ -115,4 +117,23 @@
 		return mutex;
 	}
 
+
+	public static ReentrantReadWriteLock getSessionReentrantReadWriteLock(FacesContext fc) {
+		Assert.notNull(fc, "FacesContext must not be null");
+		// Enforce presence of a session first to allow listeners
+		// to create the mutex attribute, if any.
+		fc.getExternalContext().getSession(true);		
+		ExternalContext ec = fc.getExternalContext();
+		final Map<String, Object> sessionMap = ec.getSessionMap();
+		synchronized (sessionMap) {
+			ReentrantReadWriteLock mutex = (ReentrantReadWriteLock) sessionMap.get(WebUtils.SESSION_MUTEX_ATTRIBUTE);
+			if (mutex == null) {
+				mutex = new ReentrantReadWriteLock();
+				ec.getSessionMap().put(WebUtils.SESSION_MUTEX_ATTRIBUTE, mutex); 
+			}
+			return mutex;
+
+		}
+	}
+
 }
Index: org.springframework.web/src/main/java/org/springframework/web/context/request/RequestAttributes.java
===================================================================
--- org.springframework.web/src/main/java/org/springframework/web/context/request/RequestAttributes.java	(revision 1417)
+++ org.springframework.web/src/main/java/org/springframework/web/context/request/RequestAttributes.java	(working copy)
@@ -16,6 +16,8 @@
 
 package org.springframework.web.context.request;
 
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
 /**
  * Abstraction for accessing attribute objects associated with a request.
  * Supports access to request-scoped attributes as well as to session-scoped
@@ -144,6 +146,6 @@
 	 * that is, an object to synchronize on for the underlying session.
 	 * @return the session mutex to use (never <code>null</code>
 	 */
-	Object getSessionMutex();
+	ReentrantReadWriteLock getSessionMutex();
 
 }
Index: org.springframework.web/src/main/java/org/springframework/web/context/request/FacesRequestAttributes.java
===================================================================
--- org.springframework.web/src/main/java/org/springframework/web/context/request/FacesRequestAttributes.java	(revision 1417)
+++ org.springframework.web/src/main/java/org/springframework/web/context/request/FacesRequestAttributes.java	(working copy)
@@ -18,6 +18,7 @@
 
 import java.lang.reflect.Method;
 import java.util.Map;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.faces.context.ExternalContext;
 import javax.faces.context.FacesContext;
 import javax.portlet.PortletSession;
@@ -29,7 +30,7 @@
 import org.springframework.util.ClassUtils;
 import org.springframework.util.ReflectionUtils;
 import org.springframework.util.StringUtils;
-import org.springframework.web.util.WebUtils;
+import org.springframework.web.jsf.FacesContextUtils;
 
 /**
  * {@link RequestAttributes} adapter for a JSF {@link javax.faces.context.FacesContext}.
@@ -74,6 +75,7 @@
 
 	/**
 	 * Return the JSF FacesContext that this adapter operates on.
+	 * @return the faces context
 	 */
 	protected final FacesContext getFacesContext() {
 		return this.facesContext;
@@ -82,6 +84,7 @@
 	/**
 	 * Return the JSF ExternalContext that this adapter operates on.
 	 * @see javax.faces.context.FacesContext#getExternalContext()
+	 * @return the JSF ExternalContext
 	 */
 	protected final ExternalContext getExternalContext() {
 		return getFacesContext().getExternalContext();
@@ -207,15 +210,8 @@
 		}
 	}
 
-	public Object getSessionMutex() {
-		// Enforce presence of a session first to allow listeners
-		// to create the mutex attribute, if any.
-		Object session = getExternalContext().getSession(true);
-		Object mutex = getExternalContext().getSessionMap().get(WebUtils.SESSION_MUTEX_ATTRIBUTE);
-		if (mutex == null) {
-			mutex = session;
-		}
-		return mutex;
+	public ReentrantReadWriteLock getSessionMutex() {
+		return FacesContextUtils.getSessionReentrantReadWriteLock(getFacesContext());
 	}
 
 
Index: org.springframework.web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java
===================================================================
--- org.springframework.web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java	(revision 1417)
+++ org.springframework.web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java	(working copy)
@@ -18,6 +18,7 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 
@@ -207,8 +208,8 @@
 		return getSession(true).getId();
 	}
 
-	public Object getSessionMutex() {
-		return WebUtils.getSessionMutex(getSession(true));
+	public ReentrantReadWriteLock getSessionMutex() {
+		return WebUtils.getSessionReentrantReadWriteLock(getSession(true));
 	}
 
 
Index: org.springframework.web/src/main/java/org/springframework/web/context/request/SessionScope.java
===================================================================
--- org.springframework.web/src/main/java/org/springframework/web/context/request/SessionScope.java	(revision 1417)
+++ org.springframework.web/src/main/java/org/springframework/web/context/request/SessionScope.java	(working copy)
@@ -16,6 +16,8 @@
 
 package org.springframework.web.context.request;
 
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
 import org.springframework.beans.factory.ObjectFactory;
 
 /**
@@ -87,17 +89,23 @@
 
 	@Override
 	public Object get(String name, ObjectFactory objectFactory) {
-		Object mutex = RequestContextHolder.currentRequestAttributes().getSessionMutex();
-		synchronized (mutex) {
+		ReentrantReadWriteLock mutex = RequestContextHolder.currentRequestAttributes().getSessionMutex();
+        mutex.readLock().lock();
+		try {
 			return super.get(name, objectFactory);
+		} finally {
+			mutex.readLock().unlock();
 		}
 	}
 
 	@Override
 	public Object remove(String name) {
-		Object mutex = RequestContextHolder.currentRequestAttributes().getSessionMutex();
-		synchronized (mutex) {
+		ReentrantReadWriteLock mutex = RequestContextHolder.currentRequestAttributes().getSessionMutex();
+		mutex.writeLock().lock();
+		try {
 			return super.remove(name);
+		} finally {
+			mutex.writeLock().unlock();
 		}
 	}
 
Index: org.springframework.web/src/main/java/org/springframework/web/util/HttpSessionMutexListener.java
===================================================================
--- org.springframework.web/src/main/java/org/springframework/web/util/HttpSessionMutexListener.java	(revision 1417)
+++ org.springframework.web/src/main/java/org/springframework/web/util/HttpSessionMutexListener.java	(working copy)
@@ -16,7 +16,7 @@
 
 package org.springframework.web.util;
 
-import java.io.Serializable;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import javax.servlet.http.HttpSessionEvent;
 import javax.servlet.http.HttpSessionListener;
@@ -45,20 +45,10 @@
 public class HttpSessionMutexListener implements HttpSessionListener {
 
 	public void sessionCreated(HttpSessionEvent event) {
-		event.getSession().setAttribute(WebUtils.SESSION_MUTEX_ATTRIBUTE, new Mutex());
+		event.getSession().setAttribute(WebUtils.SESSION_MUTEX_ATTRIBUTE, new ReentrantReadWriteLock());
 	}
 
 	public void sessionDestroyed(HttpSessionEvent event) {
 		event.getSession().removeAttribute(WebUtils.SESSION_MUTEX_ATTRIBUTE);
 	}
-
-
-	/**
-	 * The mutex to be registered.
-	 * Doesn't need to be anything but a plain Object to synchronize on.
-	 * Should be serializable to allow for HttpSession persistence.
-	 */
-	private static class Mutex implements Serializable {
-	}
-
 }
Index: org.springframework.web/src/main/java/org/springframework/web/util/WebUtils.java
===================================================================
--- org.springframework.web/src/main/java/org/springframework/web/util/WebUtils.java	(revision 1417)
+++ org.springframework.web/src/main/java/org/springframework/web/util/WebUtils.java	(working copy)
@@ -21,6 +21,7 @@
 import java.util.Enumeration;
 import java.util.Map;
 import java.util.TreeMap;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletRequest;
 import javax.servlet.http.Cookie;
@@ -358,13 +359,44 @@
 	 */
 	public static Object getSessionMutex(HttpSession session) {
 		Assert.notNull(session, "Session must not be null");
-		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE);
+		Object  mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE);
 		if (mutex == null) {
 			mutex = session;
 		}
 		return mutex;
 	}
 
+	/**
+	 * Return a ReentrantReadWriteLock for the given session:
+	 * that is, an object to synchronize on for the given session.
+	 * <p>Returns the session mutex attribute if available; usually,
+	 * this means that the HttpSessionMutexListener needs to be defined
+	 * in <code>web.xml</code>. Returns null if no ReentrantReadWriteLock can be found.
+	 *
+	 * <p>The ReentrantReadWriteLock is guaranteed to be the same object during
+	 * the entire lifetime of the session, available under the key defined
+	 * by the <code>SESSION_MUTEX_ATTRIBUTE</code> constant. It serves as a
+	 * safe reference to synchronize on for locking on the current session.
+	 * <p>In many cases, the HttpSession reference itself is a safe mutex
+	 * as well, since it will always be the same object reference for the
+	 * same active logical session. However, this is not guaranteed across
+	 * different servlet containers; the only 100% safe way is (this) session mutex.
+	 * @param session the HttpSession to find a mutex for
+	 * @return the ReentrantReadWriteLock object, never null
+	 * @see #SESSION_MUTEX_ATTRIBUTE
+	 * @see HttpSessionMutexListener
+	 */
+	public static ReentrantReadWriteLock getSessionReentrantReadWriteLock(HttpSession session) {
+		Assert.notNull(session, "Session must not be null");
+		synchronized (session) {
+			ReentrantReadWriteLock mutex = (ReentrantReadWriteLock) session.getAttribute(SESSION_MUTEX_ATTRIBUTE);
+			if (mutex == null) {
+				mutex = new ReentrantReadWriteLock();
+				session.setAttribute(SESSION_MUTEX_ATTRIBUTE, mutex);
+			}
+			return mutex;
+		}
+	}
 
 	/**
 	 * Determine whether the given request is an include request,
